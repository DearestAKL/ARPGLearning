// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protobuf/GameMainProtocol.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace GameMain.Runtime {

  /// <summary>Holder for reflection information generated from Protobuf/GameMainProtocol.proto</summary>
  public static partial class GameMainProtocolReflection {

    #region Descriptor
    /// <summary>File descriptor for Protobuf/GameMainProtocol.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GameMainProtocolReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch9Qcm90b2J1Zi9HYW1lTWFpblByb3RvY29sLnByb3RvEghHYW1lTWFpbhod",
            "UHJvdG9idWYvR2ZHYW1lUHJvdG9jb2wucHJvdG8iqAIKKEFuaW1hdGlvbkV2",
            "ZW50UGFyYW1ldGVyTWVzc2FnZUVmZmVjdFBsYXkSEAoIZWZmZWN0SWQYASAB",
            "KAkSFgoOdGFyZ2V0Qm9uZU5hbWUYAiABKAkSLwoOb2Zmc2V0UG9zaXRpb24Y",
            "AyABKAsyFy5HZkdhbWUuR2ZGbG9hdDNNZXNzYWdlEi8KDm9mZnNldFJvdGF0",
            "aW9uGAQgASgLMhcuR2ZHYW1lLkdmRmxvYXQzTWVzc2FnZRIrCgplZmZlY3RT",
            "aXplGAUgASgLMhcuR2ZHYW1lLkdmRmxvYXQzTWVzc2FnZRIUCgxjYW1lcmFP",
            "ZmZzZXQYBiABKAISFAoMY2FuY2VsUmVtb3ZlGAcgASgIEhcKD2NoYW5nZUF0",
            "dHJpYnV0ZRgIIAEoCCIyCiRBbmltYXRpb25FdmVudFBhcmFtZXRlck1lc3Nh",
            "Z2VVaW50SWQSCgoCaWQYASABKA0iNwomQW5pbWF0aW9uRXZlbnRQYXJhbWV0",
            "ZXJNZXNzYWdlSW50VmFsdWUSDQoFdmFsdWUYASABKAUiJAoiQW5pbWF0aW9u",
            "RXZlbnRQYXJhbWV0ZXJNZXNzYWdlTnVsbCI3CiRBbmltYXRpb25FdmVudFBh",
            "cmFtZXRlck1lc3NhZ2VTdHJpbmcSDwoHY29udGVudBgBIAEoCSJhCilBbmlt",
            "YXRpb25FdmVudFBhcmFtZXRlck1lc3NhZ2VDYW1lcmFTaGFrZRI0CgVwYXJh",
            "bRgBIAEoCzIlLkdhbWVNYWluLkNhbWVyYVNoYWtlUGFyYW1ldGVyTWVzc2Fn",
            "ZSKpAQojQW5pbWF0aW9uRXZlbnRQYXJhbWV0ZXJNZXNzYWdlU2hlbGwSCgoC",
            "aWQYASABKAUSLwoOb2Zmc2V0UG9zaXRpb24YAiABKAsyFy5HZkdhbWUuR2ZG",
            "bG9hdDNNZXNzYWdlEi8KDm9mZnNldFJvdGF0aW9uGAMgASgLMhcuR2ZHYW1l",
            "LkdmRmxvYXQzTWVzc2FnZRIUCgxpc0xvY2tUYXJnZXQYBCABKAgiSQobQ2Ft",
            "ZXJhU2hha2VQYXJhbWV0ZXJNZXNzYWdlEhIKCnNoYWtlUG93ZXIYASABKAUS",
            "FgoOc2hha2VEaXJlY3Rpb24YAiABKAUioAEKHEF0dGFja0RlZmluaXRpb25H",
            "cm91cE1lc3NhZ2USFQoNYXR0YWNrR3JvdXBJZBgBIAEoBRI0CgVpbmZvcxgC",
            "IAMoCzIlLkdhbWVNYWluLkF0dGFja0RlZmluaXRpb25JbmZvTWVzc2FnZRIz",
            "Cg9udW1lcmljYWxWYWx1ZXMYYyADKAsyGi5HYW1lTWFpbi5OdW1lcmljYWxN",
            "ZXNzYWdlIrkDChtBdHRhY2tEZWZpbml0aW9uSW5mb01lc3NhZ2USEAoIYXR0",
            "YWNrSWQYASABKAUSFAoMcGVyY2VudEluZGV4GAIgASgFEhgKEHJlZHVjZVBv",
            "aXNlVmFsdWUYAyABKAUSGQoRcmVhY3Rpb25MZXZlbFR5cGUYBCABKAUSFwoP",
            "aG9yaXpvbnRhbFBvd2VyGAUgASgFEhUKDXZlcnRpY2FsUG93ZXIYBiABKAUS",
            "PgoKY29sbGlzaW9ucxgHIAMoCzIqLkdhbWVNYWluLkF0dGFja0RlZmluaXRp",
            "b25Db2xsaXNpb25NZXNzYWdlEjoKC2NhbWVyYVNoYWtlGAggASgLMiUuR2Ft",
            "ZU1haW4uQ2FtZXJhU2hha2VQYXJhbWV0ZXJNZXNzYWdlEhIKCnNvdXJjZVR5",
            "cGUYCSABKAUSFAoMY2F0ZWdvcnlUeXBlGAogASgFEhcKD2hpdENhdGVnb3J5",
            "VHlwZRgLIAEoBRISCgppZ25vcmVUaW1lGAwgASgCEhwKFEF0dGFja2VySGl0",
            "U3RvcExldmVsGA0gASgFEhwKFERlZmVuZGVySGl0U3RvcExldmVsGA4gASgF",
            "InUKIEF0dGFja0RlZmluaXRpb25Db2xsaXNpb25NZXNzYWdlEigKB2V4dGVu",
            "dHMYASABKAsyFy5HZkdhbWUuR2ZGbG9hdDJNZXNzYWdlEicKBm9mZnNldBgC",
            "IAEoCzIXLkdmR2FtZS5HZkZsb2F0Mk1lc3NhZ2UingEKHVBhc3NpdmVTa2ls",
            "bERlZmluaXRpb25NZXNzYWdlEgoKAmlkGAEgASgFEjwKBmV2ZW50cxgDIAMo",
            "CzIsLkdhbWVNYWluLlBhc3NpdmVTa2lsbERlZmluaXRpb25FdmVudE1lc3Nh",
            "Z2USMwoPbnVtZXJpY2FsVmFsdWVzGGMgAygLMhouR2FtZU1haW4uTnVtZXJp",
            "Y2FsTWVzc2FnZSKyAQoiUGFzc2l2ZVNraWxsRGVmaW5pdGlvbkV2ZW50TWVz",
            "c2FnZRIRCglldmVudFR5cGUYASABKAUSPQoKY29uZGl0aW9ucxgCIAMoCzIp",
            "LkdhbWVNYWluLlBhc3NpdmVTa2lsbFByb0NvbmRpdGlvbk1lc3NhZ2USOgoK",
            "YWRkQnVmZmVycxgDIAMoCzImLkdhbWVNYWluLlBhc3NpdmVTa2lsbEFkZEJ1",
            "ZmZlck1lc3NhZ2Ui/wEKH1Bhc3NpdmVTa2lsbFByb0NvbmRpdGlvbk1lc3Nh",
            "Z2USGAoQcHJvQ29uZGl0aW9uVHlwZRgBIAEoBRI+Cgx0aW1lSW50ZXJ2YWwY",
            "CyABKAsyJi5HYW1lTWFpbi5UaW1lSW50ZXJ2YWxDb25kaXRpb25NZXNzYWdl",
            "SAASOAoJYXR0cmlidXRlGAwgASgLMiMuR2FtZU1haW4uQXR0cmlidXRlQ29u",
            "ZGl0aW9uTWVzc2FnZUgAEjgKCWhhc0J1ZmZlchgNIAEoCzIjLkdhbWVNYWlu",
            "Lkhhc0J1ZmZlckNvbmRpdGlvbk1lc3NhZ2VIAEIOCgxwcm9Db25kaXRpb24i",
            "fgocUGFzc2l2ZVNraWxsQWRkQnVmZmVyTWVzc2FnZRIOCgZidWZmSWQYASAB",
            "KAUSGAoQc2VsZWN0VGFyZ2V0VHlwZRgCIAEoBRI0CgdmaWx0ZXJzGAMgAygL",
            "MiMuR2FtZU1haW4uU2VsZWN0VGFyZ2V0RmlsdGVyTWVzc2FnZSJzChlTZWxl",
            "Y3RUYXJnZXRGaWx0ZXJNZXNzYWdlEhIKCmZpbHRlclR5cGUYASABKAUSOAoJ",
            "YXR0cmlidXRlGAsgASgLMiMuR2FtZU1haW4uQXR0cmlidXRlQ29uZGl0aW9u",
            "TWVzc2FnZUgAQggKBmZpbHRlciL7AQoXQnVmZmVyRGVmaW5pdGlvbk1lc3Nh",
            "Z2USCgoCaWQYASABKAUSEwoLb3ZlcmxheVR5cGUYAiABKAUSFAoMb3Zlcmxh",
            "eUxpbWl0GAMgASgFEjoKDWVuZENvbmRpdGlvbnMYCyADKAsyIy5HYW1lTWFp",
            "bi5CdWZmZXJFbmRDb25kaXRpb25NZXNzYWdlEjgKB2VmZmVjdHMYDCADKAsy",
            "Jy5HYW1lTWFpbi5CdWZmZXJFZmZlY3REZWZpbml0aW9uTWVzc2FnZRIzCg9u",
            "dW1lcmljYWxWYWx1ZXMYYyADKAsyGi5HYW1lTWFpbi5OdW1lcmljYWxNZXNz",
            "YWdlIj4KGUJ1ZmZlckVuZENvbmRpdGlvbk1lc3NhZ2USDwoHZW5kVHlwZRgB",
            "IAEoBRIQCghlbmRWYWx1ZRgCIAEoBSKwAgodQnVmZmVyRWZmZWN0RGVmaW5p",
            "dGlvbk1lc3NhZ2USEgoKZWZmZWN0VHlwZRgBIAEoBRITCgt0cmlnZ2VyVHlw",
            "ZRgCIAEoBRJECg92YWxpZENvbmRpdGlvbnMYAyADKAsyKy5HYW1lTWFpbi5C",
            "dWZmZXJFZmZlY3RWYWxpZENvbmRpdGlvbk1lc3NhZ2USRQoJYXR0cmlidXRl",
            "GAsgASgLMjAuR2FtZU1haW4uQXR0cmlidXRlQnVmZmVyRWZmZWN0RGVmaW5p",
            "dGlvbk1lc3NhZ2VIABJJCgtjaGFuZ2VDdXJIcBgMIAEoCzIyLkdhbWVNYWlu",
            "LkNoYW5nZUN1ckhwQnVmZmVyRWZmZWN0RGVmaW5pdGlvbk1lc3NhZ2VIAEIO",
            "CgxidWZmZXJFZmZlY3QitwEKJkF0dHJpYnV0ZUJ1ZmZlckVmZmVjdERlZmlu",
            "aXRpb25NZXNzYWdlEhUKDWF0dHJpYnV0ZVR5cGUYASABKAUSFgoOYXR0cmli",
            "dXRlSW5kZXgYAiABKAUSFAoMaXNQZXJjZW50YWdlGAMgASgIEhIKCnNvdXJj",
            "ZVR5cGUYBCABKAUSGAoQaXNVc2VkU291cmNlVHlwZRgFIAEoCBIaChJpc1Vz",
            "ZWRCdWZmZXJTb3VyY2UYBiABKAgioAEKKENoYW5nZUN1ckhwQnVmZmVyRWZm",
            "ZWN0RGVmaW5pdGlvbk1lc3NhZ2USEgoKc291cmNlVHlwZRgBIAEoBRIXCg9m",
            "aXhlZFZhbHVlSW5kZXgYAiABKAUSHAoUcGVyY2VudGFnZVZhbHVlSW5kZXgY",
            "AyABKAUSDQoFaXNBZGQYBCABKAgSGgoSaXNVc2VkQnVmZmVyU291cmNlGAUg",
            "ASgIIsIBCiFCdWZmZXJFZmZlY3RWYWxpZENvbmRpdGlvbk1lc3NhZ2USEQoJ",
            "dmFsaWRUeXBlGAEgASgFEj4KDHRpbWVJbnRlcnZhbBgLIAEoCzImLkdhbWVN",
            "YWluLlRpbWVJbnRlcnZhbENvbmRpdGlvbk1lc3NhZ2VIABI4CglhdHRyaWJ1",
            "dGUYDCABKAsyIy5HYW1lTWFpbi5BdHRyaWJ1dGVDb25kaXRpb25NZXNzYWdl",
            "SABCEAoOdmFsaWRDb25kaXRpb24iMAocVGltZUludGVydmFsQ29uZGl0aW9u",
            "TWVzc2FnZRIQCghpbnRlcnZhbBgBIAEoAiJeChlBdHRyaWJ1dGVDb25kaXRp",
            "b25NZXNzYWdlEhUKDWF0dHJpYnV0ZVR5cGUYASABKAUSFgoOYXR0cmlidXRl",
            "SW5kZXgYAiABKAUSEgoKaXNMZXNzVGhhbhgDIAEoCCItChlIYXNCdWZmZXJD",
            "b25kaXRpb25NZXNzYWdlEhAKCGJ1ZmZlcklkGAEgASgFIpMDChZTaGVsbERl",
            "ZmluaXRpb25NZXNzYWdlEgoKAmlkGAEgASgFEhAKCGVmZmVjdElkGAIgASgJ",
            "EhAKCGR1cmF0aW9uGAMgASgCEj0KCmNoaWxkSW5mb3MYHiADKAsyKS5HYW1l",
            "TWFpbi5TaGVsbERlZmluaXRpb25DaGlsZEluZm9NZXNzYWdlEkMKFGF0dGFj",
            "a0RlZmluaXRpb25JbmZvGGIgASgLMiUuR2FtZU1haW4uQXR0YWNrRGVmaW5p",
            "dGlvbkluZm9NZXNzYWdlEjMKD251bWVyaWNhbFZhbHVlcxhjIAMoCzIaLkdh",
            "bWVNYWluLk51bWVyaWNhbE1lc3NhZ2USEQoJc2hlbGxUeXBlGGQgASgFEjgK",
            "BmJ1bGxldBhlIAEoCzImLkdhbWVNYWluLlNoZWxsQnVsbGV0RGVmaW5pdGlv",
            "bk1lc3NhZ2VIABI0CgRhcmVhGGYgASgLMiQuR2FtZU1haW4uU2hlbGxBcmVh",
            "RGVmaW5pdGlvbk1lc3NhZ2VIAEINCgtzaGVsbENvbmZpZyJvCh9TaGVsbERl",
            "ZmluaXRpb25DaGlsZEluZm9NZXNzYWdlEhQKDGNoaWxkU2hlbGxJZBgBIAEo",
            "BRI2ChVjaGlsZEdlbmVyYXRpb25PZmZzZXQYAiABKAsyFy5HZkdhbWUuR2ZG",
            "bG9hdDNNZXNzYWdlIkEKHFNoZWxsQnVsbGV0RGVmaW5pdGlvbk1lc3NhZ2US",
            "DQoFc3BlZWQYASABKAUSEgoKYnVsbGV0VHlwZRgCIAEoBSIcChpTaGVsbEFy",
            "ZWFEZWZpbml0aW9uTWVzc2FnZSIwChBOdW1lcmljYWxNZXNzYWdlEg0KBWV4",
            "Y2VsGAEgASgFEg0KBWxvY2FsGAIgASgFQhOqAhBHYW1lTWFpbi5SdW50aW1l",
            "YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Akari.GfGame.GfGameProtocolReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMain.Runtime.AnimationEventParameterMessageEffectPlay), global::GameMain.Runtime.AnimationEventParameterMessageEffectPlay.Parser, new[]{ "EffectId", "TargetBoneName", "OffsetPosition", "OffsetRotation", "EffectSize", "CameraOffset", "CancelRemove", "ChangeAttribute" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMain.Runtime.AnimationEventParameterMessageUintId), global::GameMain.Runtime.AnimationEventParameterMessageUintId.Parser, new[]{ "Id" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMain.Runtime.AnimationEventParameterMessageIntValue), global::GameMain.Runtime.AnimationEventParameterMessageIntValue.Parser, new[]{ "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMain.Runtime.AnimationEventParameterMessageNull), global::GameMain.Runtime.AnimationEventParameterMessageNull.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMain.Runtime.AnimationEventParameterMessageString), global::GameMain.Runtime.AnimationEventParameterMessageString.Parser, new[]{ "Content" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMain.Runtime.AnimationEventParameterMessageCameraShake), global::GameMain.Runtime.AnimationEventParameterMessageCameraShake.Parser, new[]{ "Param" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMain.Runtime.AnimationEventParameterMessageShell), global::GameMain.Runtime.AnimationEventParameterMessageShell.Parser, new[]{ "Id", "OffsetPosition", "OffsetRotation", "IsLockTarget" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMain.Runtime.CameraShakeParameterMessage), global::GameMain.Runtime.CameraShakeParameterMessage.Parser, new[]{ "ShakePower", "ShakeDirection" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMain.Runtime.AttackDefinitionGroupMessage), global::GameMain.Runtime.AttackDefinitionGroupMessage.Parser, new[]{ "AttackGroupId", "Infos", "NumericalValues" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMain.Runtime.AttackDefinitionInfoMessage), global::GameMain.Runtime.AttackDefinitionInfoMessage.Parser, new[]{ "AttackId", "PercentIndex", "ReducePoiseValue", "ReactionLevelType", "HorizontalPower", "VerticalPower", "Collisions", "CameraShake", "SourceType", "CategoryType", "HitCategoryType", "IgnoreTime", "AttackerHitStopLevel", "DefenderHitStopLevel" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMain.Runtime.AttackDefinitionCollisionMessage), global::GameMain.Runtime.AttackDefinitionCollisionMessage.Parser, new[]{ "Extents", "Offset" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMain.Runtime.PassiveSkillDefinitionMessage), global::GameMain.Runtime.PassiveSkillDefinitionMessage.Parser, new[]{ "Id", "Events", "NumericalValues" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMain.Runtime.PassiveSkillDefinitionEventMessage), global::GameMain.Runtime.PassiveSkillDefinitionEventMessage.Parser, new[]{ "EventType", "Conditions", "AddBuffers" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMain.Runtime.PassiveSkillProConditionMessage), global::GameMain.Runtime.PassiveSkillProConditionMessage.Parser, new[]{ "ProConditionType", "TimeInterval", "Attribute", "HasBuffer" }, new[]{ "ProCondition" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMain.Runtime.PassiveSkillAddBufferMessage), global::GameMain.Runtime.PassiveSkillAddBufferMessage.Parser, new[]{ "BuffId", "SelectTargetType", "Filters" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMain.Runtime.SelectTargetFilterMessage), global::GameMain.Runtime.SelectTargetFilterMessage.Parser, new[]{ "FilterType", "Attribute" }, new[]{ "Filter" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMain.Runtime.BufferDefinitionMessage), global::GameMain.Runtime.BufferDefinitionMessage.Parser, new[]{ "Id", "OverlayType", "OverlayLimit", "EndConditions", "Effects", "NumericalValues" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMain.Runtime.BufferEndConditionMessage), global::GameMain.Runtime.BufferEndConditionMessage.Parser, new[]{ "EndType", "EndValue" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMain.Runtime.BufferEffectDefinitionMessage), global::GameMain.Runtime.BufferEffectDefinitionMessage.Parser, new[]{ "EffectType", "TriggerType", "ValidConditions", "Attribute", "ChangeCurHp" }, new[]{ "BufferEffect" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMain.Runtime.AttributeBufferEffectDefinitionMessage), global::GameMain.Runtime.AttributeBufferEffectDefinitionMessage.Parser, new[]{ "AttributeType", "AttributeIndex", "IsPercentage", "SourceType", "IsUsedSourceType", "IsUsedBufferSource" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMain.Runtime.ChangeCurHpBufferEffectDefinitionMessage), global::GameMain.Runtime.ChangeCurHpBufferEffectDefinitionMessage.Parser, new[]{ "SourceType", "FixedValueIndex", "PercentageValueIndex", "IsAdd", "IsUsedBufferSource" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMain.Runtime.BufferEffectValidConditionMessage), global::GameMain.Runtime.BufferEffectValidConditionMessage.Parser, new[]{ "ValidType", "TimeInterval", "Attribute" }, new[]{ "ValidCondition" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMain.Runtime.TimeIntervalConditionMessage), global::GameMain.Runtime.TimeIntervalConditionMessage.Parser, new[]{ "Interval" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMain.Runtime.AttributeConditionMessage), global::GameMain.Runtime.AttributeConditionMessage.Parser, new[]{ "AttributeType", "AttributeIndex", "IsLessThan" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMain.Runtime.HasBufferConditionMessage), global::GameMain.Runtime.HasBufferConditionMessage.Parser, new[]{ "BufferId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMain.Runtime.ShellDefinitionMessage), global::GameMain.Runtime.ShellDefinitionMessage.Parser, new[]{ "Id", "EffectId", "Duration", "ChildInfos", "AttackDefinitionInfo", "NumericalValues", "ShellType", "Bullet", "Area" }, new[]{ "ShellConfig" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMain.Runtime.ShellDefinitionChildInfoMessage), global::GameMain.Runtime.ShellDefinitionChildInfoMessage.Parser, new[]{ "ChildShellId", "ChildGenerationOffset" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMain.Runtime.ShellBulletDefinitionMessage), global::GameMain.Runtime.ShellBulletDefinitionMessage.Parser, new[]{ "Speed", "BulletType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMain.Runtime.ShellAreaDefinitionMessage), global::GameMain.Runtime.ShellAreaDefinitionMessage.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMain.Runtime.NumericalMessage), global::GameMain.Runtime.NumericalMessage.Parser, new[]{ "Excel", "Local" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// ==========AnimationEvent==========
  /// </summary>
  public sealed partial class AnimationEventParameterMessageEffectPlay : pb::IMessage<AnimationEventParameterMessageEffectPlay> {
    private static readonly pb::MessageParser<AnimationEventParameterMessageEffectPlay> _parser = new pb::MessageParser<AnimationEventParameterMessageEffectPlay>(() => new AnimationEventParameterMessageEffectPlay());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnimationEventParameterMessageEffectPlay> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMain.Runtime.GameMainProtocolReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimationEventParameterMessageEffectPlay() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimationEventParameterMessageEffectPlay(AnimationEventParameterMessageEffectPlay other) : this() {
      effectId_ = other.effectId_;
      targetBoneName_ = other.targetBoneName_;
      offsetPosition_ = other.offsetPosition_ != null ? other.offsetPosition_.Clone() : null;
      offsetRotation_ = other.offsetRotation_ != null ? other.offsetRotation_.Clone() : null;
      effectSize_ = other.effectSize_ != null ? other.effectSize_.Clone() : null;
      cameraOffset_ = other.cameraOffset_;
      cancelRemove_ = other.cancelRemove_;
      changeAttribute_ = other.changeAttribute_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimationEventParameterMessageEffectPlay Clone() {
      return new AnimationEventParameterMessageEffectPlay(this);
    }

    /// <summary>Field number for the "effectId" field.</summary>
    public const int EffectIdFieldNumber = 1;
    private string effectId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EffectId {
      get { return effectId_; }
      set {
        effectId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "targetBoneName" field.</summary>
    public const int TargetBoneNameFieldNumber = 2;
    private string targetBoneName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TargetBoneName {
      get { return targetBoneName_; }
      set {
        targetBoneName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "offsetPosition" field.</summary>
    public const int OffsetPositionFieldNumber = 3;
    private global::Akari.GfGame.GfFloat3Message offsetPosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akari.GfGame.GfFloat3Message OffsetPosition {
      get { return offsetPosition_; }
      set {
        offsetPosition_ = value;
      }
    }

    /// <summary>Field number for the "offsetRotation" field.</summary>
    public const int OffsetRotationFieldNumber = 4;
    private global::Akari.GfGame.GfFloat3Message offsetRotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akari.GfGame.GfFloat3Message OffsetRotation {
      get { return offsetRotation_; }
      set {
        offsetRotation_ = value;
      }
    }

    /// <summary>Field number for the "effectSize" field.</summary>
    public const int EffectSizeFieldNumber = 5;
    private global::Akari.GfGame.GfFloat3Message effectSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akari.GfGame.GfFloat3Message EffectSize {
      get { return effectSize_; }
      set {
        effectSize_ = value;
      }
    }

    /// <summary>Field number for the "cameraOffset" field.</summary>
    public const int CameraOffsetFieldNumber = 6;
    private float cameraOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CameraOffset {
      get { return cameraOffset_; }
      set {
        cameraOffset_ = value;
      }
    }

    /// <summary>Field number for the "cancelRemove" field.</summary>
    public const int CancelRemoveFieldNumber = 7;
    private bool cancelRemove_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CancelRemove {
      get { return cancelRemove_; }
      set {
        cancelRemove_ = value;
      }
    }

    /// <summary>Field number for the "changeAttribute" field.</summary>
    public const int ChangeAttributeFieldNumber = 8;
    private bool changeAttribute_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ChangeAttribute {
      get { return changeAttribute_; }
      set {
        changeAttribute_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AnimationEventParameterMessageEffectPlay);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AnimationEventParameterMessageEffectPlay other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EffectId != other.EffectId) return false;
      if (TargetBoneName != other.TargetBoneName) return false;
      if (!object.Equals(OffsetPosition, other.OffsetPosition)) return false;
      if (!object.Equals(OffsetRotation, other.OffsetRotation)) return false;
      if (!object.Equals(EffectSize, other.EffectSize)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(CameraOffset, other.CameraOffset)) return false;
      if (CancelRemove != other.CancelRemove) return false;
      if (ChangeAttribute != other.ChangeAttribute) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EffectId.Length != 0) hash ^= EffectId.GetHashCode();
      if (TargetBoneName.Length != 0) hash ^= TargetBoneName.GetHashCode();
      if (offsetPosition_ != null) hash ^= OffsetPosition.GetHashCode();
      if (offsetRotation_ != null) hash ^= OffsetRotation.GetHashCode();
      if (effectSize_ != null) hash ^= EffectSize.GetHashCode();
      if (CameraOffset != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(CameraOffset);
      if (CancelRemove != false) hash ^= CancelRemove.GetHashCode();
      if (ChangeAttribute != false) hash ^= ChangeAttribute.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EffectId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(EffectId);
      }
      if (TargetBoneName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TargetBoneName);
      }
      if (offsetPosition_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(OffsetPosition);
      }
      if (offsetRotation_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(OffsetRotation);
      }
      if (effectSize_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(EffectSize);
      }
      if (CameraOffset != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(CameraOffset);
      }
      if (CancelRemove != false) {
        output.WriteRawTag(56);
        output.WriteBool(CancelRemove);
      }
      if (ChangeAttribute != false) {
        output.WriteRawTag(64);
        output.WriteBool(ChangeAttribute);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EffectId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EffectId);
      }
      if (TargetBoneName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TargetBoneName);
      }
      if (offsetPosition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OffsetPosition);
      }
      if (offsetRotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OffsetRotation);
      }
      if (effectSize_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EffectSize);
      }
      if (CameraOffset != 0F) {
        size += 1 + 4;
      }
      if (CancelRemove != false) {
        size += 1 + 1;
      }
      if (ChangeAttribute != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AnimationEventParameterMessageEffectPlay other) {
      if (other == null) {
        return;
      }
      if (other.EffectId.Length != 0) {
        EffectId = other.EffectId;
      }
      if (other.TargetBoneName.Length != 0) {
        TargetBoneName = other.TargetBoneName;
      }
      if (other.offsetPosition_ != null) {
        if (offsetPosition_ == null) {
          OffsetPosition = new global::Akari.GfGame.GfFloat3Message();
        }
        OffsetPosition.MergeFrom(other.OffsetPosition);
      }
      if (other.offsetRotation_ != null) {
        if (offsetRotation_ == null) {
          OffsetRotation = new global::Akari.GfGame.GfFloat3Message();
        }
        OffsetRotation.MergeFrom(other.OffsetRotation);
      }
      if (other.effectSize_ != null) {
        if (effectSize_ == null) {
          EffectSize = new global::Akari.GfGame.GfFloat3Message();
        }
        EffectSize.MergeFrom(other.EffectSize);
      }
      if (other.CameraOffset != 0F) {
        CameraOffset = other.CameraOffset;
      }
      if (other.CancelRemove != false) {
        CancelRemove = other.CancelRemove;
      }
      if (other.ChangeAttribute != false) {
        ChangeAttribute = other.ChangeAttribute;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            EffectId = input.ReadString();
            break;
          }
          case 18: {
            TargetBoneName = input.ReadString();
            break;
          }
          case 26: {
            if (offsetPosition_ == null) {
              OffsetPosition = new global::Akari.GfGame.GfFloat3Message();
            }
            input.ReadMessage(OffsetPosition);
            break;
          }
          case 34: {
            if (offsetRotation_ == null) {
              OffsetRotation = new global::Akari.GfGame.GfFloat3Message();
            }
            input.ReadMessage(OffsetRotation);
            break;
          }
          case 42: {
            if (effectSize_ == null) {
              EffectSize = new global::Akari.GfGame.GfFloat3Message();
            }
            input.ReadMessage(EffectSize);
            break;
          }
          case 53: {
            CameraOffset = input.ReadFloat();
            break;
          }
          case 56: {
            CancelRemove = input.ReadBool();
            break;
          }
          case 64: {
            ChangeAttribute = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AnimationEventParameterMessageUintId : pb::IMessage<AnimationEventParameterMessageUintId> {
    private static readonly pb::MessageParser<AnimationEventParameterMessageUintId> _parser = new pb::MessageParser<AnimationEventParameterMessageUintId>(() => new AnimationEventParameterMessageUintId());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnimationEventParameterMessageUintId> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMain.Runtime.GameMainProtocolReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimationEventParameterMessageUintId() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimationEventParameterMessageUintId(AnimationEventParameterMessageUintId other) : this() {
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimationEventParameterMessageUintId Clone() {
      return new AnimationEventParameterMessageUintId(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private uint id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AnimationEventParameterMessageUintId);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AnimationEventParameterMessageUintId other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AnimationEventParameterMessageUintId other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AnimationEventParameterMessageIntValue : pb::IMessage<AnimationEventParameterMessageIntValue> {
    private static readonly pb::MessageParser<AnimationEventParameterMessageIntValue> _parser = new pb::MessageParser<AnimationEventParameterMessageIntValue>(() => new AnimationEventParameterMessageIntValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnimationEventParameterMessageIntValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMain.Runtime.GameMainProtocolReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimationEventParameterMessageIntValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimationEventParameterMessageIntValue(AnimationEventParameterMessageIntValue other) : this() {
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimationEventParameterMessageIntValue Clone() {
      return new AnimationEventParameterMessageIntValue(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AnimationEventParameterMessageIntValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AnimationEventParameterMessageIntValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AnimationEventParameterMessageIntValue other) {
      if (other == null) {
        return;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AnimationEventParameterMessageNull : pb::IMessage<AnimationEventParameterMessageNull> {
    private static readonly pb::MessageParser<AnimationEventParameterMessageNull> _parser = new pb::MessageParser<AnimationEventParameterMessageNull>(() => new AnimationEventParameterMessageNull());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnimationEventParameterMessageNull> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMain.Runtime.GameMainProtocolReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimationEventParameterMessageNull() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimationEventParameterMessageNull(AnimationEventParameterMessageNull other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimationEventParameterMessageNull Clone() {
      return new AnimationEventParameterMessageNull(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AnimationEventParameterMessageNull);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AnimationEventParameterMessageNull other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AnimationEventParameterMessageNull other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class AnimationEventParameterMessageString : pb::IMessage<AnimationEventParameterMessageString> {
    private static readonly pb::MessageParser<AnimationEventParameterMessageString> _parser = new pb::MessageParser<AnimationEventParameterMessageString>(() => new AnimationEventParameterMessageString());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnimationEventParameterMessageString> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMain.Runtime.GameMainProtocolReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimationEventParameterMessageString() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimationEventParameterMessageString(AnimationEventParameterMessageString other) : this() {
      content_ = other.content_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimationEventParameterMessageString Clone() {
      return new AnimationEventParameterMessageString(this);
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 1;
    private string content_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AnimationEventParameterMessageString);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AnimationEventParameterMessageString other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Content != other.Content) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Content.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Content);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AnimationEventParameterMessageString other) {
      if (other == null) {
        return;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Content = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AnimationEventParameterMessageCameraShake : pb::IMessage<AnimationEventParameterMessageCameraShake> {
    private static readonly pb::MessageParser<AnimationEventParameterMessageCameraShake> _parser = new pb::MessageParser<AnimationEventParameterMessageCameraShake>(() => new AnimationEventParameterMessageCameraShake());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnimationEventParameterMessageCameraShake> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMain.Runtime.GameMainProtocolReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimationEventParameterMessageCameraShake() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimationEventParameterMessageCameraShake(AnimationEventParameterMessageCameraShake other) : this() {
      param_ = other.param_ != null ? other.param_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimationEventParameterMessageCameraShake Clone() {
      return new AnimationEventParameterMessageCameraShake(this);
    }

    /// <summary>Field number for the "param" field.</summary>
    public const int ParamFieldNumber = 1;
    private global::GameMain.Runtime.CameraShakeParameterMessage param_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameMain.Runtime.CameraShakeParameterMessage Param {
      get { return param_; }
      set {
        param_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AnimationEventParameterMessageCameraShake);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AnimationEventParameterMessageCameraShake other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Param, other.Param)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (param_ != null) hash ^= Param.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (param_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Param);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (param_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Param);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AnimationEventParameterMessageCameraShake other) {
      if (other == null) {
        return;
      }
      if (other.param_ != null) {
        if (param_ == null) {
          Param = new global::GameMain.Runtime.CameraShakeParameterMessage();
        }
        Param.MergeFrom(other.Param);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (param_ == null) {
              Param = new global::GameMain.Runtime.CameraShakeParameterMessage();
            }
            input.ReadMessage(Param);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AnimationEventParameterMessageShell : pb::IMessage<AnimationEventParameterMessageShell> {
    private static readonly pb::MessageParser<AnimationEventParameterMessageShell> _parser = new pb::MessageParser<AnimationEventParameterMessageShell>(() => new AnimationEventParameterMessageShell());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnimationEventParameterMessageShell> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMain.Runtime.GameMainProtocolReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimationEventParameterMessageShell() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimationEventParameterMessageShell(AnimationEventParameterMessageShell other) : this() {
      id_ = other.id_;
      offsetPosition_ = other.offsetPosition_ != null ? other.offsetPosition_.Clone() : null;
      offsetRotation_ = other.offsetRotation_ != null ? other.offsetRotation_.Clone() : null;
      isLockTarget_ = other.isLockTarget_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnimationEventParameterMessageShell Clone() {
      return new AnimationEventParameterMessageShell(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "offsetPosition" field.</summary>
    public const int OffsetPositionFieldNumber = 2;
    private global::Akari.GfGame.GfFloat3Message offsetPosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akari.GfGame.GfFloat3Message OffsetPosition {
      get { return offsetPosition_; }
      set {
        offsetPosition_ = value;
      }
    }

    /// <summary>Field number for the "offsetRotation" field.</summary>
    public const int OffsetRotationFieldNumber = 3;
    private global::Akari.GfGame.GfFloat3Message offsetRotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akari.GfGame.GfFloat3Message OffsetRotation {
      get { return offsetRotation_; }
      set {
        offsetRotation_ = value;
      }
    }

    /// <summary>Field number for the "isLockTarget" field.</summary>
    public const int IsLockTargetFieldNumber = 4;
    private bool isLockTarget_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLockTarget {
      get { return isLockTarget_; }
      set {
        isLockTarget_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AnimationEventParameterMessageShell);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AnimationEventParameterMessageShell other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(OffsetPosition, other.OffsetPosition)) return false;
      if (!object.Equals(OffsetRotation, other.OffsetRotation)) return false;
      if (IsLockTarget != other.IsLockTarget) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (offsetPosition_ != null) hash ^= OffsetPosition.GetHashCode();
      if (offsetRotation_ != null) hash ^= OffsetRotation.GetHashCode();
      if (IsLockTarget != false) hash ^= IsLockTarget.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (offsetPosition_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(OffsetPosition);
      }
      if (offsetRotation_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(OffsetRotation);
      }
      if (IsLockTarget != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsLockTarget);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (offsetPosition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OffsetPosition);
      }
      if (offsetRotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OffsetRotation);
      }
      if (IsLockTarget != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AnimationEventParameterMessageShell other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.offsetPosition_ != null) {
        if (offsetPosition_ == null) {
          OffsetPosition = new global::Akari.GfGame.GfFloat3Message();
        }
        OffsetPosition.MergeFrom(other.OffsetPosition);
      }
      if (other.offsetRotation_ != null) {
        if (offsetRotation_ == null) {
          OffsetRotation = new global::Akari.GfGame.GfFloat3Message();
        }
        OffsetRotation.MergeFrom(other.OffsetRotation);
      }
      if (other.IsLockTarget != false) {
        IsLockTarget = other.IsLockTarget;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            if (offsetPosition_ == null) {
              OffsetPosition = new global::Akari.GfGame.GfFloat3Message();
            }
            input.ReadMessage(OffsetPosition);
            break;
          }
          case 26: {
            if (offsetRotation_ == null) {
              OffsetRotation = new global::Akari.GfGame.GfFloat3Message();
            }
            input.ReadMessage(OffsetRotation);
            break;
          }
          case 32: {
            IsLockTarget = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CameraShakeParameterMessage : pb::IMessage<CameraShakeParameterMessage> {
    private static readonly pb::MessageParser<CameraShakeParameterMessage> _parser = new pb::MessageParser<CameraShakeParameterMessage>(() => new CameraShakeParameterMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CameraShakeParameterMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMain.Runtime.GameMainProtocolReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraShakeParameterMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraShakeParameterMessage(CameraShakeParameterMessage other) : this() {
      shakePower_ = other.shakePower_;
      shakeDirection_ = other.shakeDirection_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraShakeParameterMessage Clone() {
      return new CameraShakeParameterMessage(this);
    }

    /// <summary>Field number for the "shakePower" field.</summary>
    public const int ShakePowerFieldNumber = 1;
    private int shakePower_;
    /// <summary>
    /// 震动强度
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShakePower {
      get { return shakePower_; }
      set {
        shakePower_ = value;
      }
    }

    /// <summary>Field number for the "shakeDirection" field.</summary>
    public const int ShakeDirectionFieldNumber = 2;
    private int shakeDirection_;
    /// <summary>
    /// 震动方向
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShakeDirection {
      get { return shakeDirection_; }
      set {
        shakeDirection_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CameraShakeParameterMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CameraShakeParameterMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ShakePower != other.ShakePower) return false;
      if (ShakeDirection != other.ShakeDirection) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ShakePower != 0) hash ^= ShakePower.GetHashCode();
      if (ShakeDirection != 0) hash ^= ShakeDirection.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ShakePower != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ShakePower);
      }
      if (ShakeDirection != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ShakeDirection);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ShakePower != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShakePower);
      }
      if (ShakeDirection != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShakeDirection);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CameraShakeParameterMessage other) {
      if (other == null) {
        return;
      }
      if (other.ShakePower != 0) {
        ShakePower = other.ShakePower;
      }
      if (other.ShakeDirection != 0) {
        ShakeDirection = other.ShakeDirection;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ShakePower = input.ReadInt32();
            break;
          }
          case 16: {
            ShakeDirection = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// ==========AttackDefinition==========
  /// </summary>
  public sealed partial class AttackDefinitionGroupMessage : pb::IMessage<AttackDefinitionGroupMessage> {
    private static readonly pb::MessageParser<AttackDefinitionGroupMessage> _parser = new pb::MessageParser<AttackDefinitionGroupMessage>(() => new AttackDefinitionGroupMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttackDefinitionGroupMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMain.Runtime.GameMainProtocolReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttackDefinitionGroupMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttackDefinitionGroupMessage(AttackDefinitionGroupMessage other) : this() {
      attackGroupId_ = other.attackGroupId_;
      infos_ = other.infos_.Clone();
      numericalValues_ = other.numericalValues_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttackDefinitionGroupMessage Clone() {
      return new AttackDefinitionGroupMessage(this);
    }

    /// <summary>Field number for the "attackGroupId" field.</summary>
    public const int AttackGroupIdFieldNumber = 1;
    private int attackGroupId_;
    /// <summary>
    /// 攻击定义组Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackGroupId {
      get { return attackGroupId_; }
      set {
        attackGroupId_ = value;
      }
    }

    /// <summary>Field number for the "infos" field.</summary>
    public const int InfosFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GameMain.Runtime.AttackDefinitionInfoMessage> _repeated_infos_codec
        = pb::FieldCodec.ForMessage(18, global::GameMain.Runtime.AttackDefinitionInfoMessage.Parser);
    private readonly pbc::RepeatedField<global::GameMain.Runtime.AttackDefinitionInfoMessage> infos_ = new pbc::RepeatedField<global::GameMain.Runtime.AttackDefinitionInfoMessage>();
    /// <summary>
    /// 攻击定义Info数组
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameMain.Runtime.AttackDefinitionInfoMessage> Infos {
      get { return infos_; }
    }

    /// <summary>Field number for the "numericalValues" field.</summary>
    public const int NumericalValuesFieldNumber = 99;
    private static readonly pb::FieldCodec<global::GameMain.Runtime.NumericalMessage> _repeated_numericalValues_codec
        = pb::FieldCodec.ForMessage(794, global::GameMain.Runtime.NumericalMessage.Parser);
    private readonly pbc::RepeatedField<global::GameMain.Runtime.NumericalMessage> numericalValues_ = new pbc::RepeatedField<global::GameMain.Runtime.NumericalMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameMain.Runtime.NumericalMessage> NumericalValues {
      get { return numericalValues_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AttackDefinitionGroupMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AttackDefinitionGroupMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AttackGroupId != other.AttackGroupId) return false;
      if(!infos_.Equals(other.infos_)) return false;
      if(!numericalValues_.Equals(other.numericalValues_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AttackGroupId != 0) hash ^= AttackGroupId.GetHashCode();
      hash ^= infos_.GetHashCode();
      hash ^= numericalValues_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AttackGroupId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AttackGroupId);
      }
      infos_.WriteTo(output, _repeated_infos_codec);
      numericalValues_.WriteTo(output, _repeated_numericalValues_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AttackGroupId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackGroupId);
      }
      size += infos_.CalculateSize(_repeated_infos_codec);
      size += numericalValues_.CalculateSize(_repeated_numericalValues_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AttackDefinitionGroupMessage other) {
      if (other == null) {
        return;
      }
      if (other.AttackGroupId != 0) {
        AttackGroupId = other.AttackGroupId;
      }
      infos_.Add(other.infos_);
      numericalValues_.Add(other.numericalValues_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AttackGroupId = input.ReadInt32();
            break;
          }
          case 18: {
            infos_.AddEntriesFrom(input, _repeated_infos_codec);
            break;
          }
          case 794: {
            numericalValues_.AddEntriesFrom(input, _repeated_numericalValues_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AttackDefinitionInfoMessage : pb::IMessage<AttackDefinitionInfoMessage> {
    private static readonly pb::MessageParser<AttackDefinitionInfoMessage> _parser = new pb::MessageParser<AttackDefinitionInfoMessage>(() => new AttackDefinitionInfoMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttackDefinitionInfoMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMain.Runtime.GameMainProtocolReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttackDefinitionInfoMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttackDefinitionInfoMessage(AttackDefinitionInfoMessage other) : this() {
      attackId_ = other.attackId_;
      percentIndex_ = other.percentIndex_;
      reducePoiseValue_ = other.reducePoiseValue_;
      reactionLevelType_ = other.reactionLevelType_;
      horizontalPower_ = other.horizontalPower_;
      verticalPower_ = other.verticalPower_;
      collisions_ = other.collisions_.Clone();
      cameraShake_ = other.cameraShake_ != null ? other.cameraShake_.Clone() : null;
      sourceType_ = other.sourceType_;
      categoryType_ = other.categoryType_;
      hitCategoryType_ = other.hitCategoryType_;
      ignoreTime_ = other.ignoreTime_;
      attackerHitStopLevel_ = other.attackerHitStopLevel_;
      defenderHitStopLevel_ = other.defenderHitStopLevel_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttackDefinitionInfoMessage Clone() {
      return new AttackDefinitionInfoMessage(this);
    }

    /// <summary>Field number for the "attackId" field.</summary>
    public const int AttackIdFieldNumber = 1;
    private int attackId_;
    /// <summary>
    ///Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackId {
      get { return attackId_; }
      set {
        attackId_ = value;
      }
    }

    /// <summary>Field number for the "percentIndex" field.</summary>
    public const int PercentIndexFieldNumber = 2;
    private int percentIndex_;
    /// <summary>
    ///基础百分比
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PercentIndex {
      get { return percentIndex_; }
      set {
        percentIndex_ = value;
      }
    }

    /// <summary>Field number for the "reducePoiseValue" field.</summary>
    public const int ReducePoiseValueFieldNumber = 3;
    private int reducePoiseValue_;
    /// <summary>
    ///削韧值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReducePoiseValue {
      get { return reducePoiseValue_; }
      set {
        reducePoiseValue_ = value;
      }
    }

    /// <summary>Field number for the "reactionLevelType" field.</summary>
    public const int ReactionLevelTypeFieldNumber = 4;
    private int reactionLevelType_;
    /// <summary>
    ///反应等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ReactionLevelType {
      get { return reactionLevelType_; }
      set {
        reactionLevelType_ = value;
      }
    }

    /// <summary>Field number for the "horizontalPower" field.</summary>
    public const int HorizontalPowerFieldNumber = 5;
    private int horizontalPower_;
    /// <summary>
    ///水平冲击力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HorizontalPower {
      get { return horizontalPower_; }
      set {
        horizontalPower_ = value;
      }
    }

    /// <summary>Field number for the "verticalPower" field.</summary>
    public const int VerticalPowerFieldNumber = 6;
    private int verticalPower_;
    /// <summary>
    ///垂直冲击力
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VerticalPower {
      get { return verticalPower_; }
      set {
        verticalPower_ = value;
      }
    }

    /// <summary>Field number for the "collisions" field.</summary>
    public const int CollisionsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::GameMain.Runtime.AttackDefinitionCollisionMessage> _repeated_collisions_codec
        = pb::FieldCodec.ForMessage(58, global::GameMain.Runtime.AttackDefinitionCollisionMessage.Parser);
    private readonly pbc::RepeatedField<global::GameMain.Runtime.AttackDefinitionCollisionMessage> collisions_ = new pbc::RepeatedField<global::GameMain.Runtime.AttackDefinitionCollisionMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameMain.Runtime.AttackDefinitionCollisionMessage> Collisions {
      get { return collisions_; }
    }

    /// <summary>Field number for the "cameraShake" field.</summary>
    public const int CameraShakeFieldNumber = 8;
    private global::GameMain.Runtime.CameraShakeParameterMessage cameraShake_;
    /// <summary>
    ///相机震动
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameMain.Runtime.CameraShakeParameterMessage CameraShake {
      get { return cameraShake_; }
      set {
        cameraShake_ = value;
      }
    }

    /// <summary>Field number for the "sourceType" field.</summary>
    public const int SourceTypeFieldNumber = 9;
    private int sourceType_;
    /// <summary>
    ///百分比来源（只支持攻击，防御和生命值）
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SourceType {
      get { return sourceType_; }
      set {
        sourceType_ = value;
      }
    }

    /// <summary>Field number for the "categoryType" field.</summary>
    public const int CategoryTypeFieldNumber = 10;
    private int categoryType_;
    /// <summary>
    ///攻击类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CategoryType {
      get { return categoryType_; }
      set {
        categoryType_ = value;
      }
    }

    /// <summary>Field number for the "hitCategoryType" field.</summary>
    public const int HitCategoryTypeFieldNumber = 11;
    private int hitCategoryType_;
    /// <summary>
    ///攻击目标类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HitCategoryType {
      get { return hitCategoryType_; }
      set {
        hitCategoryType_ = value;
      }
    }

    /// <summary>Field number for the "ignoreTime" field.</summary>
    public const int IgnoreTimeFieldNumber = 12;
    private float ignoreTime_;
    /// <summary>
    ///对同一对象碰撞检测的间隔时间
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float IgnoreTime {
      get { return ignoreTime_; }
      set {
        ignoreTime_ = value;
      }
    }

    /// <summary>Field number for the "AttackerHitStopLevel" field.</summary>
    public const int AttackerHitStopLevelFieldNumber = 13;
    private int attackerHitStopLevel_;
    /// <summary>
    ///攻击命中 攻击方 hitstop 等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttackerHitStopLevel {
      get { return attackerHitStopLevel_; }
      set {
        attackerHitStopLevel_ = value;
      }
    }

    /// <summary>Field number for the "DefenderHitStopLevel" field.</summary>
    public const int DefenderHitStopLevelFieldNumber = 14;
    private int defenderHitStopLevel_;
    /// <summary>
    ///攻击命中 受击方 hitstop 等级
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DefenderHitStopLevel {
      get { return defenderHitStopLevel_; }
      set {
        defenderHitStopLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AttackDefinitionInfoMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AttackDefinitionInfoMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AttackId != other.AttackId) return false;
      if (PercentIndex != other.PercentIndex) return false;
      if (ReducePoiseValue != other.ReducePoiseValue) return false;
      if (ReactionLevelType != other.ReactionLevelType) return false;
      if (HorizontalPower != other.HorizontalPower) return false;
      if (VerticalPower != other.VerticalPower) return false;
      if(!collisions_.Equals(other.collisions_)) return false;
      if (!object.Equals(CameraShake, other.CameraShake)) return false;
      if (SourceType != other.SourceType) return false;
      if (CategoryType != other.CategoryType) return false;
      if (HitCategoryType != other.HitCategoryType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(IgnoreTime, other.IgnoreTime)) return false;
      if (AttackerHitStopLevel != other.AttackerHitStopLevel) return false;
      if (DefenderHitStopLevel != other.DefenderHitStopLevel) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AttackId != 0) hash ^= AttackId.GetHashCode();
      if (PercentIndex != 0) hash ^= PercentIndex.GetHashCode();
      if (ReducePoiseValue != 0) hash ^= ReducePoiseValue.GetHashCode();
      if (ReactionLevelType != 0) hash ^= ReactionLevelType.GetHashCode();
      if (HorizontalPower != 0) hash ^= HorizontalPower.GetHashCode();
      if (VerticalPower != 0) hash ^= VerticalPower.GetHashCode();
      hash ^= collisions_.GetHashCode();
      if (cameraShake_ != null) hash ^= CameraShake.GetHashCode();
      if (SourceType != 0) hash ^= SourceType.GetHashCode();
      if (CategoryType != 0) hash ^= CategoryType.GetHashCode();
      if (HitCategoryType != 0) hash ^= HitCategoryType.GetHashCode();
      if (IgnoreTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(IgnoreTime);
      if (AttackerHitStopLevel != 0) hash ^= AttackerHitStopLevel.GetHashCode();
      if (DefenderHitStopLevel != 0) hash ^= DefenderHitStopLevel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AttackId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AttackId);
      }
      if (PercentIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(PercentIndex);
      }
      if (ReducePoiseValue != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ReducePoiseValue);
      }
      if (ReactionLevelType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ReactionLevelType);
      }
      if (HorizontalPower != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(HorizontalPower);
      }
      if (VerticalPower != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(VerticalPower);
      }
      collisions_.WriteTo(output, _repeated_collisions_codec);
      if (cameraShake_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(CameraShake);
      }
      if (SourceType != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(SourceType);
      }
      if (CategoryType != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(CategoryType);
      }
      if (HitCategoryType != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(HitCategoryType);
      }
      if (IgnoreTime != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(IgnoreTime);
      }
      if (AttackerHitStopLevel != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(AttackerHitStopLevel);
      }
      if (DefenderHitStopLevel != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(DefenderHitStopLevel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AttackId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackId);
      }
      if (PercentIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PercentIndex);
      }
      if (ReducePoiseValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReducePoiseValue);
      }
      if (ReactionLevelType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReactionLevelType);
      }
      if (HorizontalPower != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HorizontalPower);
      }
      if (VerticalPower != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VerticalPower);
      }
      size += collisions_.CalculateSize(_repeated_collisions_codec);
      if (cameraShake_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CameraShake);
      }
      if (SourceType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SourceType);
      }
      if (CategoryType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CategoryType);
      }
      if (HitCategoryType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitCategoryType);
      }
      if (IgnoreTime != 0F) {
        size += 1 + 4;
      }
      if (AttackerHitStopLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttackerHitStopLevel);
      }
      if (DefenderHitStopLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DefenderHitStopLevel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AttackDefinitionInfoMessage other) {
      if (other == null) {
        return;
      }
      if (other.AttackId != 0) {
        AttackId = other.AttackId;
      }
      if (other.PercentIndex != 0) {
        PercentIndex = other.PercentIndex;
      }
      if (other.ReducePoiseValue != 0) {
        ReducePoiseValue = other.ReducePoiseValue;
      }
      if (other.ReactionLevelType != 0) {
        ReactionLevelType = other.ReactionLevelType;
      }
      if (other.HorizontalPower != 0) {
        HorizontalPower = other.HorizontalPower;
      }
      if (other.VerticalPower != 0) {
        VerticalPower = other.VerticalPower;
      }
      collisions_.Add(other.collisions_);
      if (other.cameraShake_ != null) {
        if (cameraShake_ == null) {
          CameraShake = new global::GameMain.Runtime.CameraShakeParameterMessage();
        }
        CameraShake.MergeFrom(other.CameraShake);
      }
      if (other.SourceType != 0) {
        SourceType = other.SourceType;
      }
      if (other.CategoryType != 0) {
        CategoryType = other.CategoryType;
      }
      if (other.HitCategoryType != 0) {
        HitCategoryType = other.HitCategoryType;
      }
      if (other.IgnoreTime != 0F) {
        IgnoreTime = other.IgnoreTime;
      }
      if (other.AttackerHitStopLevel != 0) {
        AttackerHitStopLevel = other.AttackerHitStopLevel;
      }
      if (other.DefenderHitStopLevel != 0) {
        DefenderHitStopLevel = other.DefenderHitStopLevel;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AttackId = input.ReadInt32();
            break;
          }
          case 16: {
            PercentIndex = input.ReadInt32();
            break;
          }
          case 24: {
            ReducePoiseValue = input.ReadInt32();
            break;
          }
          case 32: {
            ReactionLevelType = input.ReadInt32();
            break;
          }
          case 40: {
            HorizontalPower = input.ReadInt32();
            break;
          }
          case 48: {
            VerticalPower = input.ReadInt32();
            break;
          }
          case 58: {
            collisions_.AddEntriesFrom(input, _repeated_collisions_codec);
            break;
          }
          case 66: {
            if (cameraShake_ == null) {
              CameraShake = new global::GameMain.Runtime.CameraShakeParameterMessage();
            }
            input.ReadMessage(CameraShake);
            break;
          }
          case 72: {
            SourceType = input.ReadInt32();
            break;
          }
          case 80: {
            CategoryType = input.ReadInt32();
            break;
          }
          case 88: {
            HitCategoryType = input.ReadInt32();
            break;
          }
          case 101: {
            IgnoreTime = input.ReadFloat();
            break;
          }
          case 104: {
            AttackerHitStopLevel = input.ReadInt32();
            break;
          }
          case 112: {
            DefenderHitStopLevel = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AttackDefinitionCollisionMessage : pb::IMessage<AttackDefinitionCollisionMessage> {
    private static readonly pb::MessageParser<AttackDefinitionCollisionMessage> _parser = new pb::MessageParser<AttackDefinitionCollisionMessage>(() => new AttackDefinitionCollisionMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttackDefinitionCollisionMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMain.Runtime.GameMainProtocolReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttackDefinitionCollisionMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttackDefinitionCollisionMessage(AttackDefinitionCollisionMessage other) : this() {
      extents_ = other.extents_ != null ? other.extents_.Clone() : null;
      offset_ = other.offset_ != null ? other.offset_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttackDefinitionCollisionMessage Clone() {
      return new AttackDefinitionCollisionMessage(this);
    }

    /// <summary>Field number for the "extents" field.</summary>
    public const int ExtentsFieldNumber = 1;
    private global::Akari.GfGame.GfFloat2Message extents_;
    /// <summary>
    /// 碰撞器延伸
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akari.GfGame.GfFloat2Message Extents {
      get { return extents_; }
      set {
        extents_ = value;
      }
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 2;
    private global::Akari.GfGame.GfFloat2Message offset_;
    /// <summary>
    /// 碰撞器中心偏移
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akari.GfGame.GfFloat2Message Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AttackDefinitionCollisionMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AttackDefinitionCollisionMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Extents, other.Extents)) return false;
      if (!object.Equals(Offset, other.Offset)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (extents_ != null) hash ^= Extents.GetHashCode();
      if (offset_ != null) hash ^= Offset.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (extents_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Extents);
      }
      if (offset_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Offset);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (extents_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Extents);
      }
      if (offset_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Offset);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AttackDefinitionCollisionMessage other) {
      if (other == null) {
        return;
      }
      if (other.extents_ != null) {
        if (extents_ == null) {
          Extents = new global::Akari.GfGame.GfFloat2Message();
        }
        Extents.MergeFrom(other.Extents);
      }
      if (other.offset_ != null) {
        if (offset_ == null) {
          Offset = new global::Akari.GfGame.GfFloat2Message();
        }
        Offset.MergeFrom(other.Offset);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (extents_ == null) {
              Extents = new global::Akari.GfGame.GfFloat2Message();
            }
            input.ReadMessage(Extents);
            break;
          }
          case 18: {
            if (offset_ == null) {
              Offset = new global::Akari.GfGame.GfFloat2Message();
            }
            input.ReadMessage(Offset);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PassiveSkillDefinitionMessage : pb::IMessage<PassiveSkillDefinitionMessage> {
    private static readonly pb::MessageParser<PassiveSkillDefinitionMessage> _parser = new pb::MessageParser<PassiveSkillDefinitionMessage>(() => new PassiveSkillDefinitionMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PassiveSkillDefinitionMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMain.Runtime.GameMainProtocolReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PassiveSkillDefinitionMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PassiveSkillDefinitionMessage(PassiveSkillDefinitionMessage other) : this() {
      id_ = other.id_;
      events_ = other.events_.Clone();
      numericalValues_ = other.numericalValues_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PassiveSkillDefinitionMessage Clone() {
      return new PassiveSkillDefinitionMessage(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "events" field.</summary>
    public const int EventsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::GameMain.Runtime.PassiveSkillDefinitionEventMessage> _repeated_events_codec
        = pb::FieldCodec.ForMessage(26, global::GameMain.Runtime.PassiveSkillDefinitionEventMessage.Parser);
    private readonly pbc::RepeatedField<global::GameMain.Runtime.PassiveSkillDefinitionEventMessage> events_ = new pbc::RepeatedField<global::GameMain.Runtime.PassiveSkillDefinitionEventMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameMain.Runtime.PassiveSkillDefinitionEventMessage> Events {
      get { return events_; }
    }

    /// <summary>Field number for the "numericalValues" field.</summary>
    public const int NumericalValuesFieldNumber = 99;
    private static readonly pb::FieldCodec<global::GameMain.Runtime.NumericalMessage> _repeated_numericalValues_codec
        = pb::FieldCodec.ForMessage(794, global::GameMain.Runtime.NumericalMessage.Parser);
    private readonly pbc::RepeatedField<global::GameMain.Runtime.NumericalMessage> numericalValues_ = new pbc::RepeatedField<global::GameMain.Runtime.NumericalMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameMain.Runtime.NumericalMessage> NumericalValues {
      get { return numericalValues_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PassiveSkillDefinitionMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PassiveSkillDefinitionMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if(!events_.Equals(other.events_)) return false;
      if(!numericalValues_.Equals(other.numericalValues_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      hash ^= events_.GetHashCode();
      hash ^= numericalValues_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      events_.WriteTo(output, _repeated_events_codec);
      numericalValues_.WriteTo(output, _repeated_numericalValues_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      size += events_.CalculateSize(_repeated_events_codec);
      size += numericalValues_.CalculateSize(_repeated_numericalValues_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PassiveSkillDefinitionMessage other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      events_.Add(other.events_);
      numericalValues_.Add(other.numericalValues_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 26: {
            events_.AddEntriesFrom(input, _repeated_events_codec);
            break;
          }
          case 794: {
            numericalValues_.AddEntriesFrom(input, _repeated_numericalValues_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PassiveSkillDefinitionEventMessage : pb::IMessage<PassiveSkillDefinitionEventMessage> {
    private static readonly pb::MessageParser<PassiveSkillDefinitionEventMessage> _parser = new pb::MessageParser<PassiveSkillDefinitionEventMessage>(() => new PassiveSkillDefinitionEventMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PassiveSkillDefinitionEventMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMain.Runtime.GameMainProtocolReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PassiveSkillDefinitionEventMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PassiveSkillDefinitionEventMessage(PassiveSkillDefinitionEventMessage other) : this() {
      eventType_ = other.eventType_;
      conditions_ = other.conditions_.Clone();
      addBuffers_ = other.addBuffers_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PassiveSkillDefinitionEventMessage Clone() {
      return new PassiveSkillDefinitionEventMessage(this);
    }

    /// <summary>Field number for the "eventType" field.</summary>
    public const int EventTypeFieldNumber = 1;
    private int eventType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EventType {
      get { return eventType_; }
      set {
        eventType_ = value;
      }
    }

    /// <summary>Field number for the "conditions" field.</summary>
    public const int ConditionsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::GameMain.Runtime.PassiveSkillProConditionMessage> _repeated_conditions_codec
        = pb::FieldCodec.ForMessage(18, global::GameMain.Runtime.PassiveSkillProConditionMessage.Parser);
    private readonly pbc::RepeatedField<global::GameMain.Runtime.PassiveSkillProConditionMessage> conditions_ = new pbc::RepeatedField<global::GameMain.Runtime.PassiveSkillProConditionMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameMain.Runtime.PassiveSkillProConditionMessage> Conditions {
      get { return conditions_; }
    }

    /// <summary>Field number for the "addBuffers" field.</summary>
    public const int AddBuffersFieldNumber = 3;
    private static readonly pb::FieldCodec<global::GameMain.Runtime.PassiveSkillAddBufferMessage> _repeated_addBuffers_codec
        = pb::FieldCodec.ForMessage(26, global::GameMain.Runtime.PassiveSkillAddBufferMessage.Parser);
    private readonly pbc::RepeatedField<global::GameMain.Runtime.PassiveSkillAddBufferMessage> addBuffers_ = new pbc::RepeatedField<global::GameMain.Runtime.PassiveSkillAddBufferMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameMain.Runtime.PassiveSkillAddBufferMessage> AddBuffers {
      get { return addBuffers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PassiveSkillDefinitionEventMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PassiveSkillDefinitionEventMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventType != other.EventType) return false;
      if(!conditions_.Equals(other.conditions_)) return false;
      if(!addBuffers_.Equals(other.addBuffers_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EventType != 0) hash ^= EventType.GetHashCode();
      hash ^= conditions_.GetHashCode();
      hash ^= addBuffers_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EventType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EventType);
      }
      conditions_.WriteTo(output, _repeated_conditions_codec);
      addBuffers_.WriteTo(output, _repeated_addBuffers_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EventType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventType);
      }
      size += conditions_.CalculateSize(_repeated_conditions_codec);
      size += addBuffers_.CalculateSize(_repeated_addBuffers_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PassiveSkillDefinitionEventMessage other) {
      if (other == null) {
        return;
      }
      if (other.EventType != 0) {
        EventType = other.EventType;
      }
      conditions_.Add(other.conditions_);
      addBuffers_.Add(other.addBuffers_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EventType = input.ReadInt32();
            break;
          }
          case 18: {
            conditions_.AddEntriesFrom(input, _repeated_conditions_codec);
            break;
          }
          case 26: {
            addBuffers_.AddEntriesFrom(input, _repeated_addBuffers_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PassiveSkillProConditionMessage : pb::IMessage<PassiveSkillProConditionMessage> {
    private static readonly pb::MessageParser<PassiveSkillProConditionMessage> _parser = new pb::MessageParser<PassiveSkillProConditionMessage>(() => new PassiveSkillProConditionMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PassiveSkillProConditionMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMain.Runtime.GameMainProtocolReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PassiveSkillProConditionMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PassiveSkillProConditionMessage(PassiveSkillProConditionMessage other) : this() {
      proConditionType_ = other.proConditionType_;
      switch (other.ProConditionCase) {
        case ProConditionOneofCase.TimeInterval:
          TimeInterval = other.TimeInterval.Clone();
          break;
        case ProConditionOneofCase.Attribute:
          Attribute = other.Attribute.Clone();
          break;
        case ProConditionOneofCase.HasBuffer:
          HasBuffer = other.HasBuffer.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PassiveSkillProConditionMessage Clone() {
      return new PassiveSkillProConditionMessage(this);
    }

    /// <summary>Field number for the "proConditionType" field.</summary>
    public const int ProConditionTypeFieldNumber = 1;
    private int proConditionType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ProConditionType {
      get { return proConditionType_; }
      set {
        proConditionType_ = value;
      }
    }

    /// <summary>Field number for the "timeInterval" field.</summary>
    public const int TimeIntervalFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameMain.Runtime.TimeIntervalConditionMessage TimeInterval {
      get { return proConditionCase_ == ProConditionOneofCase.TimeInterval ? (global::GameMain.Runtime.TimeIntervalConditionMessage) proCondition_ : null; }
      set {
        proCondition_ = value;
        proConditionCase_ = value == null ? ProConditionOneofCase.None : ProConditionOneofCase.TimeInterval;
      }
    }

    /// <summary>Field number for the "attribute" field.</summary>
    public const int AttributeFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameMain.Runtime.AttributeConditionMessage Attribute {
      get { return proConditionCase_ == ProConditionOneofCase.Attribute ? (global::GameMain.Runtime.AttributeConditionMessage) proCondition_ : null; }
      set {
        proCondition_ = value;
        proConditionCase_ = value == null ? ProConditionOneofCase.None : ProConditionOneofCase.Attribute;
      }
    }

    /// <summary>Field number for the "hasBuffer" field.</summary>
    public const int HasBufferFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameMain.Runtime.HasBufferConditionMessage HasBuffer {
      get { return proConditionCase_ == ProConditionOneofCase.HasBuffer ? (global::GameMain.Runtime.HasBufferConditionMessage) proCondition_ : null; }
      set {
        proCondition_ = value;
        proConditionCase_ = value == null ? ProConditionOneofCase.None : ProConditionOneofCase.HasBuffer;
      }
    }

    private object proCondition_;
    /// <summary>Enum of possible cases for the "proCondition" oneof.</summary>
    public enum ProConditionOneofCase {
      None = 0,
      TimeInterval = 11,
      Attribute = 12,
      HasBuffer = 13,
    }
    private ProConditionOneofCase proConditionCase_ = ProConditionOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProConditionOneofCase ProConditionCase {
      get { return proConditionCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearProCondition() {
      proConditionCase_ = ProConditionOneofCase.None;
      proCondition_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PassiveSkillProConditionMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PassiveSkillProConditionMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProConditionType != other.ProConditionType) return false;
      if (!object.Equals(TimeInterval, other.TimeInterval)) return false;
      if (!object.Equals(Attribute, other.Attribute)) return false;
      if (!object.Equals(HasBuffer, other.HasBuffer)) return false;
      if (ProConditionCase != other.ProConditionCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProConditionType != 0) hash ^= ProConditionType.GetHashCode();
      if (proConditionCase_ == ProConditionOneofCase.TimeInterval) hash ^= TimeInterval.GetHashCode();
      if (proConditionCase_ == ProConditionOneofCase.Attribute) hash ^= Attribute.GetHashCode();
      if (proConditionCase_ == ProConditionOneofCase.HasBuffer) hash ^= HasBuffer.GetHashCode();
      hash ^= (int) proConditionCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ProConditionType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ProConditionType);
      }
      if (proConditionCase_ == ProConditionOneofCase.TimeInterval) {
        output.WriteRawTag(90);
        output.WriteMessage(TimeInterval);
      }
      if (proConditionCase_ == ProConditionOneofCase.Attribute) {
        output.WriteRawTag(98);
        output.WriteMessage(Attribute);
      }
      if (proConditionCase_ == ProConditionOneofCase.HasBuffer) {
        output.WriteRawTag(106);
        output.WriteMessage(HasBuffer);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProConditionType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ProConditionType);
      }
      if (proConditionCase_ == ProConditionOneofCase.TimeInterval) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimeInterval);
      }
      if (proConditionCase_ == ProConditionOneofCase.Attribute) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Attribute);
      }
      if (proConditionCase_ == ProConditionOneofCase.HasBuffer) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HasBuffer);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PassiveSkillProConditionMessage other) {
      if (other == null) {
        return;
      }
      if (other.ProConditionType != 0) {
        ProConditionType = other.ProConditionType;
      }
      switch (other.ProConditionCase) {
        case ProConditionOneofCase.TimeInterval:
          if (TimeInterval == null) {
            TimeInterval = new global::GameMain.Runtime.TimeIntervalConditionMessage();
          }
          TimeInterval.MergeFrom(other.TimeInterval);
          break;
        case ProConditionOneofCase.Attribute:
          if (Attribute == null) {
            Attribute = new global::GameMain.Runtime.AttributeConditionMessage();
          }
          Attribute.MergeFrom(other.Attribute);
          break;
        case ProConditionOneofCase.HasBuffer:
          if (HasBuffer == null) {
            HasBuffer = new global::GameMain.Runtime.HasBufferConditionMessage();
          }
          HasBuffer.MergeFrom(other.HasBuffer);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ProConditionType = input.ReadInt32();
            break;
          }
          case 90: {
            global::GameMain.Runtime.TimeIntervalConditionMessage subBuilder = new global::GameMain.Runtime.TimeIntervalConditionMessage();
            if (proConditionCase_ == ProConditionOneofCase.TimeInterval) {
              subBuilder.MergeFrom(TimeInterval);
            }
            input.ReadMessage(subBuilder);
            TimeInterval = subBuilder;
            break;
          }
          case 98: {
            global::GameMain.Runtime.AttributeConditionMessage subBuilder = new global::GameMain.Runtime.AttributeConditionMessage();
            if (proConditionCase_ == ProConditionOneofCase.Attribute) {
              subBuilder.MergeFrom(Attribute);
            }
            input.ReadMessage(subBuilder);
            Attribute = subBuilder;
            break;
          }
          case 106: {
            global::GameMain.Runtime.HasBufferConditionMessage subBuilder = new global::GameMain.Runtime.HasBufferConditionMessage();
            if (proConditionCase_ == ProConditionOneofCase.HasBuffer) {
              subBuilder.MergeFrom(HasBuffer);
            }
            input.ReadMessage(subBuilder);
            HasBuffer = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class PassiveSkillAddBufferMessage : pb::IMessage<PassiveSkillAddBufferMessage> {
    private static readonly pb::MessageParser<PassiveSkillAddBufferMessage> _parser = new pb::MessageParser<PassiveSkillAddBufferMessage>(() => new PassiveSkillAddBufferMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PassiveSkillAddBufferMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMain.Runtime.GameMainProtocolReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PassiveSkillAddBufferMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PassiveSkillAddBufferMessage(PassiveSkillAddBufferMessage other) : this() {
      buffId_ = other.buffId_;
      selectTargetType_ = other.selectTargetType_;
      filters_ = other.filters_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PassiveSkillAddBufferMessage Clone() {
      return new PassiveSkillAddBufferMessage(this);
    }

    /// <summary>Field number for the "buffId" field.</summary>
    public const int BuffIdFieldNumber = 1;
    private int buffId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BuffId {
      get { return buffId_; }
      set {
        buffId_ = value;
      }
    }

    /// <summary>Field number for the "selectTargetType" field.</summary>
    public const int SelectTargetTypeFieldNumber = 2;
    private int selectTargetType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SelectTargetType {
      get { return selectTargetType_; }
      set {
        selectTargetType_ = value;
      }
    }

    /// <summary>Field number for the "filters" field.</summary>
    public const int FiltersFieldNumber = 3;
    private static readonly pb::FieldCodec<global::GameMain.Runtime.SelectTargetFilterMessage> _repeated_filters_codec
        = pb::FieldCodec.ForMessage(26, global::GameMain.Runtime.SelectTargetFilterMessage.Parser);
    private readonly pbc::RepeatedField<global::GameMain.Runtime.SelectTargetFilterMessage> filters_ = new pbc::RepeatedField<global::GameMain.Runtime.SelectTargetFilterMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameMain.Runtime.SelectTargetFilterMessage> Filters {
      get { return filters_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PassiveSkillAddBufferMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PassiveSkillAddBufferMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BuffId != other.BuffId) return false;
      if (SelectTargetType != other.SelectTargetType) return false;
      if(!filters_.Equals(other.filters_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BuffId != 0) hash ^= BuffId.GetHashCode();
      if (SelectTargetType != 0) hash ^= SelectTargetType.GetHashCode();
      hash ^= filters_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BuffId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BuffId);
      }
      if (SelectTargetType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SelectTargetType);
      }
      filters_.WriteTo(output, _repeated_filters_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BuffId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuffId);
      }
      if (SelectTargetType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SelectTargetType);
      }
      size += filters_.CalculateSize(_repeated_filters_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PassiveSkillAddBufferMessage other) {
      if (other == null) {
        return;
      }
      if (other.BuffId != 0) {
        BuffId = other.BuffId;
      }
      if (other.SelectTargetType != 0) {
        SelectTargetType = other.SelectTargetType;
      }
      filters_.Add(other.filters_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BuffId = input.ReadInt32();
            break;
          }
          case 16: {
            SelectTargetType = input.ReadInt32();
            break;
          }
          case 26: {
            filters_.AddEntriesFrom(input, _repeated_filters_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SelectTargetFilterMessage : pb::IMessage<SelectTargetFilterMessage> {
    private static readonly pb::MessageParser<SelectTargetFilterMessage> _parser = new pb::MessageParser<SelectTargetFilterMessage>(() => new SelectTargetFilterMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SelectTargetFilterMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMain.Runtime.GameMainProtocolReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SelectTargetFilterMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SelectTargetFilterMessage(SelectTargetFilterMessage other) : this() {
      filterType_ = other.filterType_;
      switch (other.FilterCase) {
        case FilterOneofCase.Attribute:
          Attribute = other.Attribute.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SelectTargetFilterMessage Clone() {
      return new SelectTargetFilterMessage(this);
    }

    /// <summary>Field number for the "filterType" field.</summary>
    public const int FilterTypeFieldNumber = 1;
    private int filterType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FilterType {
      get { return filterType_; }
      set {
        filterType_ = value;
      }
    }

    /// <summary>Field number for the "attribute" field.</summary>
    public const int AttributeFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameMain.Runtime.AttributeConditionMessage Attribute {
      get { return filterCase_ == FilterOneofCase.Attribute ? (global::GameMain.Runtime.AttributeConditionMessage) filter_ : null; }
      set {
        filter_ = value;
        filterCase_ = value == null ? FilterOneofCase.None : FilterOneofCase.Attribute;
      }
    }

    private object filter_;
    /// <summary>Enum of possible cases for the "filter" oneof.</summary>
    public enum FilterOneofCase {
      None = 0,
      Attribute = 11,
    }
    private FilterOneofCase filterCase_ = FilterOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FilterOneofCase FilterCase {
      get { return filterCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFilter() {
      filterCase_ = FilterOneofCase.None;
      filter_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SelectTargetFilterMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SelectTargetFilterMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FilterType != other.FilterType) return false;
      if (!object.Equals(Attribute, other.Attribute)) return false;
      if (FilterCase != other.FilterCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FilterType != 0) hash ^= FilterType.GetHashCode();
      if (filterCase_ == FilterOneofCase.Attribute) hash ^= Attribute.GetHashCode();
      hash ^= (int) filterCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FilterType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FilterType);
      }
      if (filterCase_ == FilterOneofCase.Attribute) {
        output.WriteRawTag(90);
        output.WriteMessage(Attribute);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FilterType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FilterType);
      }
      if (filterCase_ == FilterOneofCase.Attribute) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Attribute);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SelectTargetFilterMessage other) {
      if (other == null) {
        return;
      }
      if (other.FilterType != 0) {
        FilterType = other.FilterType;
      }
      switch (other.FilterCase) {
        case FilterOneofCase.Attribute:
          if (Attribute == null) {
            Attribute = new global::GameMain.Runtime.AttributeConditionMessage();
          }
          Attribute.MergeFrom(other.Attribute);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FilterType = input.ReadInt32();
            break;
          }
          case 90: {
            global::GameMain.Runtime.AttributeConditionMessage subBuilder = new global::GameMain.Runtime.AttributeConditionMessage();
            if (filterCase_ == FilterOneofCase.Attribute) {
              subBuilder.MergeFrom(Attribute);
            }
            input.ReadMessage(subBuilder);
            Attribute = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// ==========BufferDefinition==========
  /// </summary>
  public sealed partial class BufferDefinitionMessage : pb::IMessage<BufferDefinitionMessage> {
    private static readonly pb::MessageParser<BufferDefinitionMessage> _parser = new pb::MessageParser<BufferDefinitionMessage>(() => new BufferDefinitionMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BufferDefinitionMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMain.Runtime.GameMainProtocolReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BufferDefinitionMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BufferDefinitionMessage(BufferDefinitionMessage other) : this() {
      id_ = other.id_;
      overlayType_ = other.overlayType_;
      overlayLimit_ = other.overlayLimit_;
      endConditions_ = other.endConditions_.Clone();
      effects_ = other.effects_.Clone();
      numericalValues_ = other.numericalValues_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BufferDefinitionMessage Clone() {
      return new BufferDefinitionMessage(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "overlayType" field.</summary>
    public const int OverlayTypeFieldNumber = 2;
    private int overlayType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OverlayType {
      get { return overlayType_; }
      set {
        overlayType_ = value;
      }
    }

    /// <summary>Field number for the "overlayLimit" field.</summary>
    public const int OverlayLimitFieldNumber = 3;
    private int overlayLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OverlayLimit {
      get { return overlayLimit_; }
      set {
        overlayLimit_ = value;
      }
    }

    /// <summary>Field number for the "endConditions" field.</summary>
    public const int EndConditionsFieldNumber = 11;
    private static readonly pb::FieldCodec<global::GameMain.Runtime.BufferEndConditionMessage> _repeated_endConditions_codec
        = pb::FieldCodec.ForMessage(90, global::GameMain.Runtime.BufferEndConditionMessage.Parser);
    private readonly pbc::RepeatedField<global::GameMain.Runtime.BufferEndConditionMessage> endConditions_ = new pbc::RepeatedField<global::GameMain.Runtime.BufferEndConditionMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameMain.Runtime.BufferEndConditionMessage> EndConditions {
      get { return endConditions_; }
    }

    /// <summary>Field number for the "effects" field.</summary>
    public const int EffectsFieldNumber = 12;
    private static readonly pb::FieldCodec<global::GameMain.Runtime.BufferEffectDefinitionMessage> _repeated_effects_codec
        = pb::FieldCodec.ForMessage(98, global::GameMain.Runtime.BufferEffectDefinitionMessage.Parser);
    private readonly pbc::RepeatedField<global::GameMain.Runtime.BufferEffectDefinitionMessage> effects_ = new pbc::RepeatedField<global::GameMain.Runtime.BufferEffectDefinitionMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameMain.Runtime.BufferEffectDefinitionMessage> Effects {
      get { return effects_; }
    }

    /// <summary>Field number for the "numericalValues" field.</summary>
    public const int NumericalValuesFieldNumber = 99;
    private static readonly pb::FieldCodec<global::GameMain.Runtime.NumericalMessage> _repeated_numericalValues_codec
        = pb::FieldCodec.ForMessage(794, global::GameMain.Runtime.NumericalMessage.Parser);
    private readonly pbc::RepeatedField<global::GameMain.Runtime.NumericalMessage> numericalValues_ = new pbc::RepeatedField<global::GameMain.Runtime.NumericalMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameMain.Runtime.NumericalMessage> NumericalValues {
      get { return numericalValues_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BufferDefinitionMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BufferDefinitionMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (OverlayType != other.OverlayType) return false;
      if (OverlayLimit != other.OverlayLimit) return false;
      if(!endConditions_.Equals(other.endConditions_)) return false;
      if(!effects_.Equals(other.effects_)) return false;
      if(!numericalValues_.Equals(other.numericalValues_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (OverlayType != 0) hash ^= OverlayType.GetHashCode();
      if (OverlayLimit != 0) hash ^= OverlayLimit.GetHashCode();
      hash ^= endConditions_.GetHashCode();
      hash ^= effects_.GetHashCode();
      hash ^= numericalValues_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (OverlayType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(OverlayType);
      }
      if (OverlayLimit != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(OverlayLimit);
      }
      endConditions_.WriteTo(output, _repeated_endConditions_codec);
      effects_.WriteTo(output, _repeated_effects_codec);
      numericalValues_.WriteTo(output, _repeated_numericalValues_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (OverlayType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OverlayType);
      }
      if (OverlayLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OverlayLimit);
      }
      size += endConditions_.CalculateSize(_repeated_endConditions_codec);
      size += effects_.CalculateSize(_repeated_effects_codec);
      size += numericalValues_.CalculateSize(_repeated_numericalValues_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BufferDefinitionMessage other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.OverlayType != 0) {
        OverlayType = other.OverlayType;
      }
      if (other.OverlayLimit != 0) {
        OverlayLimit = other.OverlayLimit;
      }
      endConditions_.Add(other.endConditions_);
      effects_.Add(other.effects_);
      numericalValues_.Add(other.numericalValues_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            OverlayType = input.ReadInt32();
            break;
          }
          case 24: {
            OverlayLimit = input.ReadInt32();
            break;
          }
          case 90: {
            endConditions_.AddEntriesFrom(input, _repeated_endConditions_codec);
            break;
          }
          case 98: {
            effects_.AddEntriesFrom(input, _repeated_effects_codec);
            break;
          }
          case 794: {
            numericalValues_.AddEntriesFrom(input, _repeated_numericalValues_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BufferEndConditionMessage : pb::IMessage<BufferEndConditionMessage> {
    private static readonly pb::MessageParser<BufferEndConditionMessage> _parser = new pb::MessageParser<BufferEndConditionMessage>(() => new BufferEndConditionMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BufferEndConditionMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMain.Runtime.GameMainProtocolReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BufferEndConditionMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BufferEndConditionMessage(BufferEndConditionMessage other) : this() {
      endType_ = other.endType_;
      endValue_ = other.endValue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BufferEndConditionMessage Clone() {
      return new BufferEndConditionMessage(this);
    }

    /// <summary>Field number for the "endType" field.</summary>
    public const int EndTypeFieldNumber = 1;
    private int endType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndType {
      get { return endType_; }
      set {
        endType_ = value;
      }
    }

    /// <summary>Field number for the "endValue" field.</summary>
    public const int EndValueFieldNumber = 2;
    private int endValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndValue {
      get { return endValue_; }
      set {
        endValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BufferEndConditionMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BufferEndConditionMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EndType != other.EndType) return false;
      if (EndValue != other.EndValue) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EndType != 0) hash ^= EndType.GetHashCode();
      if (EndValue != 0) hash ^= EndValue.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EndType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EndType);
      }
      if (EndValue != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(EndValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EndType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndType);
      }
      if (EndValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndValue);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BufferEndConditionMessage other) {
      if (other == null) {
        return;
      }
      if (other.EndType != 0) {
        EndType = other.EndType;
      }
      if (other.EndValue != 0) {
        EndValue = other.EndValue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EndType = input.ReadInt32();
            break;
          }
          case 16: {
            EndValue = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// ==========BufferEffectDefinition==========
  /// </summary>
  public sealed partial class BufferEffectDefinitionMessage : pb::IMessage<BufferEffectDefinitionMessage> {
    private static readonly pb::MessageParser<BufferEffectDefinitionMessage> _parser = new pb::MessageParser<BufferEffectDefinitionMessage>(() => new BufferEffectDefinitionMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BufferEffectDefinitionMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMain.Runtime.GameMainProtocolReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BufferEffectDefinitionMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BufferEffectDefinitionMessage(BufferEffectDefinitionMessage other) : this() {
      effectType_ = other.effectType_;
      triggerType_ = other.triggerType_;
      validConditions_ = other.validConditions_.Clone();
      switch (other.BufferEffectCase) {
        case BufferEffectOneofCase.Attribute:
          Attribute = other.Attribute.Clone();
          break;
        case BufferEffectOneofCase.ChangeCurHp:
          ChangeCurHp = other.ChangeCurHp.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BufferEffectDefinitionMessage Clone() {
      return new BufferEffectDefinitionMessage(this);
    }

    /// <summary>Field number for the "effectType" field.</summary>
    public const int EffectTypeFieldNumber = 1;
    private int effectType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EffectType {
      get { return effectType_; }
      set {
        effectType_ = value;
      }
    }

    /// <summary>Field number for the "triggerType" field.</summary>
    public const int TriggerTypeFieldNumber = 2;
    private int triggerType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TriggerType {
      get { return triggerType_; }
      set {
        triggerType_ = value;
      }
    }

    /// <summary>Field number for the "validConditions" field.</summary>
    public const int ValidConditionsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::GameMain.Runtime.BufferEffectValidConditionMessage> _repeated_validConditions_codec
        = pb::FieldCodec.ForMessage(26, global::GameMain.Runtime.BufferEffectValidConditionMessage.Parser);
    private readonly pbc::RepeatedField<global::GameMain.Runtime.BufferEffectValidConditionMessage> validConditions_ = new pbc::RepeatedField<global::GameMain.Runtime.BufferEffectValidConditionMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameMain.Runtime.BufferEffectValidConditionMessage> ValidConditions {
      get { return validConditions_; }
    }

    /// <summary>Field number for the "attribute" field.</summary>
    public const int AttributeFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameMain.Runtime.AttributeBufferEffectDefinitionMessage Attribute {
      get { return bufferEffectCase_ == BufferEffectOneofCase.Attribute ? (global::GameMain.Runtime.AttributeBufferEffectDefinitionMessage) bufferEffect_ : null; }
      set {
        bufferEffect_ = value;
        bufferEffectCase_ = value == null ? BufferEffectOneofCase.None : BufferEffectOneofCase.Attribute;
      }
    }

    /// <summary>Field number for the "changeCurHp" field.</summary>
    public const int ChangeCurHpFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameMain.Runtime.ChangeCurHpBufferEffectDefinitionMessage ChangeCurHp {
      get { return bufferEffectCase_ == BufferEffectOneofCase.ChangeCurHp ? (global::GameMain.Runtime.ChangeCurHpBufferEffectDefinitionMessage) bufferEffect_ : null; }
      set {
        bufferEffect_ = value;
        bufferEffectCase_ = value == null ? BufferEffectOneofCase.None : BufferEffectOneofCase.ChangeCurHp;
      }
    }

    private object bufferEffect_;
    /// <summary>Enum of possible cases for the "bufferEffect" oneof.</summary>
    public enum BufferEffectOneofCase {
      None = 0,
      Attribute = 11,
      ChangeCurHp = 12,
    }
    private BufferEffectOneofCase bufferEffectCase_ = BufferEffectOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BufferEffectOneofCase BufferEffectCase {
      get { return bufferEffectCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBufferEffect() {
      bufferEffectCase_ = BufferEffectOneofCase.None;
      bufferEffect_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BufferEffectDefinitionMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BufferEffectDefinitionMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EffectType != other.EffectType) return false;
      if (TriggerType != other.TriggerType) return false;
      if(!validConditions_.Equals(other.validConditions_)) return false;
      if (!object.Equals(Attribute, other.Attribute)) return false;
      if (!object.Equals(ChangeCurHp, other.ChangeCurHp)) return false;
      if (BufferEffectCase != other.BufferEffectCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EffectType != 0) hash ^= EffectType.GetHashCode();
      if (TriggerType != 0) hash ^= TriggerType.GetHashCode();
      hash ^= validConditions_.GetHashCode();
      if (bufferEffectCase_ == BufferEffectOneofCase.Attribute) hash ^= Attribute.GetHashCode();
      if (bufferEffectCase_ == BufferEffectOneofCase.ChangeCurHp) hash ^= ChangeCurHp.GetHashCode();
      hash ^= (int) bufferEffectCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EffectType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EffectType);
      }
      if (TriggerType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TriggerType);
      }
      validConditions_.WriteTo(output, _repeated_validConditions_codec);
      if (bufferEffectCase_ == BufferEffectOneofCase.Attribute) {
        output.WriteRawTag(90);
        output.WriteMessage(Attribute);
      }
      if (bufferEffectCase_ == BufferEffectOneofCase.ChangeCurHp) {
        output.WriteRawTag(98);
        output.WriteMessage(ChangeCurHp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EffectType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EffectType);
      }
      if (TriggerType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TriggerType);
      }
      size += validConditions_.CalculateSize(_repeated_validConditions_codec);
      if (bufferEffectCase_ == BufferEffectOneofCase.Attribute) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Attribute);
      }
      if (bufferEffectCase_ == BufferEffectOneofCase.ChangeCurHp) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChangeCurHp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BufferEffectDefinitionMessage other) {
      if (other == null) {
        return;
      }
      if (other.EffectType != 0) {
        EffectType = other.EffectType;
      }
      if (other.TriggerType != 0) {
        TriggerType = other.TriggerType;
      }
      validConditions_.Add(other.validConditions_);
      switch (other.BufferEffectCase) {
        case BufferEffectOneofCase.Attribute:
          if (Attribute == null) {
            Attribute = new global::GameMain.Runtime.AttributeBufferEffectDefinitionMessage();
          }
          Attribute.MergeFrom(other.Attribute);
          break;
        case BufferEffectOneofCase.ChangeCurHp:
          if (ChangeCurHp == null) {
            ChangeCurHp = new global::GameMain.Runtime.ChangeCurHpBufferEffectDefinitionMessage();
          }
          ChangeCurHp.MergeFrom(other.ChangeCurHp);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EffectType = input.ReadInt32();
            break;
          }
          case 16: {
            TriggerType = input.ReadInt32();
            break;
          }
          case 26: {
            validConditions_.AddEntriesFrom(input, _repeated_validConditions_codec);
            break;
          }
          case 90: {
            global::GameMain.Runtime.AttributeBufferEffectDefinitionMessage subBuilder = new global::GameMain.Runtime.AttributeBufferEffectDefinitionMessage();
            if (bufferEffectCase_ == BufferEffectOneofCase.Attribute) {
              subBuilder.MergeFrom(Attribute);
            }
            input.ReadMessage(subBuilder);
            Attribute = subBuilder;
            break;
          }
          case 98: {
            global::GameMain.Runtime.ChangeCurHpBufferEffectDefinitionMessage subBuilder = new global::GameMain.Runtime.ChangeCurHpBufferEffectDefinitionMessage();
            if (bufferEffectCase_ == BufferEffectOneofCase.ChangeCurHp) {
              subBuilder.MergeFrom(ChangeCurHp);
            }
            input.ReadMessage(subBuilder);
            ChangeCurHp = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class AttributeBufferEffectDefinitionMessage : pb::IMessage<AttributeBufferEffectDefinitionMessage> {
    private static readonly pb::MessageParser<AttributeBufferEffectDefinitionMessage> _parser = new pb::MessageParser<AttributeBufferEffectDefinitionMessage>(() => new AttributeBufferEffectDefinitionMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttributeBufferEffectDefinitionMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMain.Runtime.GameMainProtocolReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttributeBufferEffectDefinitionMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttributeBufferEffectDefinitionMessage(AttributeBufferEffectDefinitionMessage other) : this() {
      attributeType_ = other.attributeType_;
      attributeIndex_ = other.attributeIndex_;
      isPercentage_ = other.isPercentage_;
      sourceType_ = other.sourceType_;
      isUsedSourceType_ = other.isUsedSourceType_;
      isUsedBufferSource_ = other.isUsedBufferSource_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttributeBufferEffectDefinitionMessage Clone() {
      return new AttributeBufferEffectDefinitionMessage(this);
    }

    /// <summary>Field number for the "attributeType" field.</summary>
    public const int AttributeTypeFieldNumber = 1;
    private int attributeType_;
    /// <summary>
    ///改变属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttributeType {
      get { return attributeType_; }
      set {
        attributeType_ = value;
      }
    }

    /// <summary>Field number for the "attributeIndex" field.</summary>
    public const int AttributeIndexFieldNumber = 2;
    private int attributeIndex_;
    /// <summary>
    ///改变属性值
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttributeIndex {
      get { return attributeIndex_; }
      set {
        attributeIndex_ = value;
      }
    }

    /// <summary>Field number for the "isPercentage" field.</summary>
    public const int IsPercentageFieldNumber = 3;
    private bool isPercentage_;
    /// <summary>
    ///是否是百分比
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPercentage {
      get { return isPercentage_; }
      set {
        isPercentage_ = value;
      }
    }

    /// <summary>Field number for the "sourceType" field.</summary>
    public const int SourceTypeFieldNumber = 4;
    private int sourceType_;
    /// <summary>
    ///来源属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SourceType {
      get { return sourceType_; }
      set {
        sourceType_ = value;
      }
    }

    /// <summary>Field number for the "isUsedSourceType" field.</summary>
    public const int IsUsedSourceTypeFieldNumber = 5;
    private bool isUsedSourceType_;
    /// <summary>
    ///是否使用来源属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsUsedSourceType {
      get { return isUsedSourceType_; }
      set {
        isUsedSourceType_ = value;
      }
    }

    /// <summary>Field number for the "isUsedBufferSource" field.</summary>
    public const int IsUsedBufferSourceFieldNumber = 6;
    private bool isUsedBufferSource_;
    /// <summary>
    ///是否使用Buffer来源者的属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsUsedBufferSource {
      get { return isUsedBufferSource_; }
      set {
        isUsedBufferSource_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AttributeBufferEffectDefinitionMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AttributeBufferEffectDefinitionMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AttributeType != other.AttributeType) return false;
      if (AttributeIndex != other.AttributeIndex) return false;
      if (IsPercentage != other.IsPercentage) return false;
      if (SourceType != other.SourceType) return false;
      if (IsUsedSourceType != other.IsUsedSourceType) return false;
      if (IsUsedBufferSource != other.IsUsedBufferSource) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AttributeType != 0) hash ^= AttributeType.GetHashCode();
      if (AttributeIndex != 0) hash ^= AttributeIndex.GetHashCode();
      if (IsPercentage != false) hash ^= IsPercentage.GetHashCode();
      if (SourceType != 0) hash ^= SourceType.GetHashCode();
      if (IsUsedSourceType != false) hash ^= IsUsedSourceType.GetHashCode();
      if (IsUsedBufferSource != false) hash ^= IsUsedBufferSource.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AttributeType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AttributeType);
      }
      if (AttributeIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AttributeIndex);
      }
      if (IsPercentage != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsPercentage);
      }
      if (SourceType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SourceType);
      }
      if (IsUsedSourceType != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsUsedSourceType);
      }
      if (IsUsedBufferSource != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsUsedBufferSource);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AttributeType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttributeType);
      }
      if (AttributeIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttributeIndex);
      }
      if (IsPercentage != false) {
        size += 1 + 1;
      }
      if (SourceType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SourceType);
      }
      if (IsUsedSourceType != false) {
        size += 1 + 1;
      }
      if (IsUsedBufferSource != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AttributeBufferEffectDefinitionMessage other) {
      if (other == null) {
        return;
      }
      if (other.AttributeType != 0) {
        AttributeType = other.AttributeType;
      }
      if (other.AttributeIndex != 0) {
        AttributeIndex = other.AttributeIndex;
      }
      if (other.IsPercentage != false) {
        IsPercentage = other.IsPercentage;
      }
      if (other.SourceType != 0) {
        SourceType = other.SourceType;
      }
      if (other.IsUsedSourceType != false) {
        IsUsedSourceType = other.IsUsedSourceType;
      }
      if (other.IsUsedBufferSource != false) {
        IsUsedBufferSource = other.IsUsedBufferSource;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AttributeType = input.ReadInt32();
            break;
          }
          case 16: {
            AttributeIndex = input.ReadInt32();
            break;
          }
          case 24: {
            IsPercentage = input.ReadBool();
            break;
          }
          case 32: {
            SourceType = input.ReadInt32();
            break;
          }
          case 40: {
            IsUsedSourceType = input.ReadBool();
            break;
          }
          case 48: {
            IsUsedBufferSource = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChangeCurHpBufferEffectDefinitionMessage : pb::IMessage<ChangeCurHpBufferEffectDefinitionMessage> {
    private static readonly pb::MessageParser<ChangeCurHpBufferEffectDefinitionMessage> _parser = new pb::MessageParser<ChangeCurHpBufferEffectDefinitionMessage>(() => new ChangeCurHpBufferEffectDefinitionMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChangeCurHpBufferEffectDefinitionMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMain.Runtime.GameMainProtocolReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeCurHpBufferEffectDefinitionMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeCurHpBufferEffectDefinitionMessage(ChangeCurHpBufferEffectDefinitionMessage other) : this() {
      sourceType_ = other.sourceType_;
      fixedValueIndex_ = other.fixedValueIndex_;
      percentageValueIndex_ = other.percentageValueIndex_;
      isAdd_ = other.isAdd_;
      isUsedBufferSource_ = other.isUsedBufferSource_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChangeCurHpBufferEffectDefinitionMessage Clone() {
      return new ChangeCurHpBufferEffectDefinitionMessage(this);
    }

    /// <summary>Field number for the "sourceType" field.</summary>
    public const int SourceTypeFieldNumber = 1;
    private int sourceType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SourceType {
      get { return sourceType_; }
      set {
        sourceType_ = value;
      }
    }

    /// <summary>Field number for the "fixedValueIndex" field.</summary>
    public const int FixedValueIndexFieldNumber = 2;
    private int fixedValueIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FixedValueIndex {
      get { return fixedValueIndex_; }
      set {
        fixedValueIndex_ = value;
      }
    }

    /// <summary>Field number for the "percentageValueIndex" field.</summary>
    public const int PercentageValueIndexFieldNumber = 3;
    private int percentageValueIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PercentageValueIndex {
      get { return percentageValueIndex_; }
      set {
        percentageValueIndex_ = value;
      }
    }

    /// <summary>Field number for the "isAdd" field.</summary>
    public const int IsAddFieldNumber = 4;
    private bool isAdd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsAdd {
      get { return isAdd_; }
      set {
        isAdd_ = value;
      }
    }

    /// <summary>Field number for the "isUsedBufferSource" field.</summary>
    public const int IsUsedBufferSourceFieldNumber = 5;
    private bool isUsedBufferSource_;
    /// <summary>
    ///是否使用Buffer来源者的属性
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsUsedBufferSource {
      get { return isUsedBufferSource_; }
      set {
        isUsedBufferSource_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChangeCurHpBufferEffectDefinitionMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChangeCurHpBufferEffectDefinitionMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SourceType != other.SourceType) return false;
      if (FixedValueIndex != other.FixedValueIndex) return false;
      if (PercentageValueIndex != other.PercentageValueIndex) return false;
      if (IsAdd != other.IsAdd) return false;
      if (IsUsedBufferSource != other.IsUsedBufferSource) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SourceType != 0) hash ^= SourceType.GetHashCode();
      if (FixedValueIndex != 0) hash ^= FixedValueIndex.GetHashCode();
      if (PercentageValueIndex != 0) hash ^= PercentageValueIndex.GetHashCode();
      if (IsAdd != false) hash ^= IsAdd.GetHashCode();
      if (IsUsedBufferSource != false) hash ^= IsUsedBufferSource.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SourceType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SourceType);
      }
      if (FixedValueIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FixedValueIndex);
      }
      if (PercentageValueIndex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PercentageValueIndex);
      }
      if (IsAdd != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsAdd);
      }
      if (IsUsedBufferSource != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsUsedBufferSource);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SourceType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SourceType);
      }
      if (FixedValueIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FixedValueIndex);
      }
      if (PercentageValueIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PercentageValueIndex);
      }
      if (IsAdd != false) {
        size += 1 + 1;
      }
      if (IsUsedBufferSource != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChangeCurHpBufferEffectDefinitionMessage other) {
      if (other == null) {
        return;
      }
      if (other.SourceType != 0) {
        SourceType = other.SourceType;
      }
      if (other.FixedValueIndex != 0) {
        FixedValueIndex = other.FixedValueIndex;
      }
      if (other.PercentageValueIndex != 0) {
        PercentageValueIndex = other.PercentageValueIndex;
      }
      if (other.IsAdd != false) {
        IsAdd = other.IsAdd;
      }
      if (other.IsUsedBufferSource != false) {
        IsUsedBufferSource = other.IsUsedBufferSource;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SourceType = input.ReadInt32();
            break;
          }
          case 16: {
            FixedValueIndex = input.ReadInt32();
            break;
          }
          case 24: {
            PercentageValueIndex = input.ReadInt32();
            break;
          }
          case 32: {
            IsAdd = input.ReadBool();
            break;
          }
          case 40: {
            IsUsedBufferSource = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BufferEffectValidConditionMessage : pb::IMessage<BufferEffectValidConditionMessage> {
    private static readonly pb::MessageParser<BufferEffectValidConditionMessage> _parser = new pb::MessageParser<BufferEffectValidConditionMessage>(() => new BufferEffectValidConditionMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BufferEffectValidConditionMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMain.Runtime.GameMainProtocolReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BufferEffectValidConditionMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BufferEffectValidConditionMessage(BufferEffectValidConditionMessage other) : this() {
      validType_ = other.validType_;
      switch (other.ValidConditionCase) {
        case ValidConditionOneofCase.TimeInterval:
          TimeInterval = other.TimeInterval.Clone();
          break;
        case ValidConditionOneofCase.Attribute:
          Attribute = other.Attribute.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BufferEffectValidConditionMessage Clone() {
      return new BufferEffectValidConditionMessage(this);
    }

    /// <summary>Field number for the "validType" field.</summary>
    public const int ValidTypeFieldNumber = 1;
    private int validType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ValidType {
      get { return validType_; }
      set {
        validType_ = value;
      }
    }

    /// <summary>Field number for the "timeInterval" field.</summary>
    public const int TimeIntervalFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameMain.Runtime.TimeIntervalConditionMessage TimeInterval {
      get { return validConditionCase_ == ValidConditionOneofCase.TimeInterval ? (global::GameMain.Runtime.TimeIntervalConditionMessage) validCondition_ : null; }
      set {
        validCondition_ = value;
        validConditionCase_ = value == null ? ValidConditionOneofCase.None : ValidConditionOneofCase.TimeInterval;
      }
    }

    /// <summary>Field number for the "attribute" field.</summary>
    public const int AttributeFieldNumber = 12;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameMain.Runtime.AttributeConditionMessage Attribute {
      get { return validConditionCase_ == ValidConditionOneofCase.Attribute ? (global::GameMain.Runtime.AttributeConditionMessage) validCondition_ : null; }
      set {
        validCondition_ = value;
        validConditionCase_ = value == null ? ValidConditionOneofCase.None : ValidConditionOneofCase.Attribute;
      }
    }

    private object validCondition_;
    /// <summary>Enum of possible cases for the "validCondition" oneof.</summary>
    public enum ValidConditionOneofCase {
      None = 0,
      TimeInterval = 11,
      Attribute = 12,
    }
    private ValidConditionOneofCase validConditionCase_ = ValidConditionOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValidConditionOneofCase ValidConditionCase {
      get { return validConditionCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValidCondition() {
      validConditionCase_ = ValidConditionOneofCase.None;
      validCondition_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BufferEffectValidConditionMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BufferEffectValidConditionMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ValidType != other.ValidType) return false;
      if (!object.Equals(TimeInterval, other.TimeInterval)) return false;
      if (!object.Equals(Attribute, other.Attribute)) return false;
      if (ValidConditionCase != other.ValidConditionCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ValidType != 0) hash ^= ValidType.GetHashCode();
      if (validConditionCase_ == ValidConditionOneofCase.TimeInterval) hash ^= TimeInterval.GetHashCode();
      if (validConditionCase_ == ValidConditionOneofCase.Attribute) hash ^= Attribute.GetHashCode();
      hash ^= (int) validConditionCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ValidType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ValidType);
      }
      if (validConditionCase_ == ValidConditionOneofCase.TimeInterval) {
        output.WriteRawTag(90);
        output.WriteMessage(TimeInterval);
      }
      if (validConditionCase_ == ValidConditionOneofCase.Attribute) {
        output.WriteRawTag(98);
        output.WriteMessage(Attribute);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ValidType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ValidType);
      }
      if (validConditionCase_ == ValidConditionOneofCase.TimeInterval) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimeInterval);
      }
      if (validConditionCase_ == ValidConditionOneofCase.Attribute) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Attribute);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BufferEffectValidConditionMessage other) {
      if (other == null) {
        return;
      }
      if (other.ValidType != 0) {
        ValidType = other.ValidType;
      }
      switch (other.ValidConditionCase) {
        case ValidConditionOneofCase.TimeInterval:
          if (TimeInterval == null) {
            TimeInterval = new global::GameMain.Runtime.TimeIntervalConditionMessage();
          }
          TimeInterval.MergeFrom(other.TimeInterval);
          break;
        case ValidConditionOneofCase.Attribute:
          if (Attribute == null) {
            Attribute = new global::GameMain.Runtime.AttributeConditionMessage();
          }
          Attribute.MergeFrom(other.Attribute);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ValidType = input.ReadInt32();
            break;
          }
          case 90: {
            global::GameMain.Runtime.TimeIntervalConditionMessage subBuilder = new global::GameMain.Runtime.TimeIntervalConditionMessage();
            if (validConditionCase_ == ValidConditionOneofCase.TimeInterval) {
              subBuilder.MergeFrom(TimeInterval);
            }
            input.ReadMessage(subBuilder);
            TimeInterval = subBuilder;
            break;
          }
          case 98: {
            global::GameMain.Runtime.AttributeConditionMessage subBuilder = new global::GameMain.Runtime.AttributeConditionMessage();
            if (validConditionCase_ == ValidConditionOneofCase.Attribute) {
              subBuilder.MergeFrom(Attribute);
            }
            input.ReadMessage(subBuilder);
            Attribute = subBuilder;
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///==================Condition===============
  /// </summary>
  public sealed partial class TimeIntervalConditionMessage : pb::IMessage<TimeIntervalConditionMessage> {
    private static readonly pb::MessageParser<TimeIntervalConditionMessage> _parser = new pb::MessageParser<TimeIntervalConditionMessage>(() => new TimeIntervalConditionMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TimeIntervalConditionMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMain.Runtime.GameMainProtocolReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeIntervalConditionMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeIntervalConditionMessage(TimeIntervalConditionMessage other) : this() {
      interval_ = other.interval_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimeIntervalConditionMessage Clone() {
      return new TimeIntervalConditionMessage(this);
    }

    /// <summary>Field number for the "interval" field.</summary>
    public const int IntervalFieldNumber = 1;
    private float interval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Interval {
      get { return interval_; }
      set {
        interval_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TimeIntervalConditionMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TimeIntervalConditionMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Interval, other.Interval)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Interval != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Interval);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Interval != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Interval);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Interval != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TimeIntervalConditionMessage other) {
      if (other == null) {
        return;
      }
      if (other.Interval != 0F) {
        Interval = other.Interval;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Interval = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AttributeConditionMessage : pb::IMessage<AttributeConditionMessage> {
    private static readonly pb::MessageParser<AttributeConditionMessage> _parser = new pb::MessageParser<AttributeConditionMessage>(() => new AttributeConditionMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttributeConditionMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMain.Runtime.GameMainProtocolReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttributeConditionMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttributeConditionMessage(AttributeConditionMessage other) : this() {
      attributeType_ = other.attributeType_;
      attributeIndex_ = other.attributeIndex_;
      isLessThan_ = other.isLessThan_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttributeConditionMessage Clone() {
      return new AttributeConditionMessage(this);
    }

    /// <summary>Field number for the "attributeType" field.</summary>
    public const int AttributeTypeFieldNumber = 1;
    private int attributeType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttributeType {
      get { return attributeType_; }
      set {
        attributeType_ = value;
      }
    }

    /// <summary>Field number for the "attributeIndex" field.</summary>
    public const int AttributeIndexFieldNumber = 2;
    private int attributeIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AttributeIndex {
      get { return attributeIndex_; }
      set {
        attributeIndex_ = value;
      }
    }

    /// <summary>Field number for the "isLessThan" field.</summary>
    public const int IsLessThanFieldNumber = 3;
    private bool isLessThan_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLessThan {
      get { return isLessThan_; }
      set {
        isLessThan_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AttributeConditionMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AttributeConditionMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AttributeType != other.AttributeType) return false;
      if (AttributeIndex != other.AttributeIndex) return false;
      if (IsLessThan != other.IsLessThan) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AttributeType != 0) hash ^= AttributeType.GetHashCode();
      if (AttributeIndex != 0) hash ^= AttributeIndex.GetHashCode();
      if (IsLessThan != false) hash ^= IsLessThan.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AttributeType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AttributeType);
      }
      if (AttributeIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AttributeIndex);
      }
      if (IsLessThan != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsLessThan);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AttributeType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttributeType);
      }
      if (AttributeIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AttributeIndex);
      }
      if (IsLessThan != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AttributeConditionMessage other) {
      if (other == null) {
        return;
      }
      if (other.AttributeType != 0) {
        AttributeType = other.AttributeType;
      }
      if (other.AttributeIndex != 0) {
        AttributeIndex = other.AttributeIndex;
      }
      if (other.IsLessThan != false) {
        IsLessThan = other.IsLessThan;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AttributeType = input.ReadInt32();
            break;
          }
          case 16: {
            AttributeIndex = input.ReadInt32();
            break;
          }
          case 24: {
            IsLessThan = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HasBufferConditionMessage : pb::IMessage<HasBufferConditionMessage> {
    private static readonly pb::MessageParser<HasBufferConditionMessage> _parser = new pb::MessageParser<HasBufferConditionMessage>(() => new HasBufferConditionMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HasBufferConditionMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMain.Runtime.GameMainProtocolReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HasBufferConditionMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HasBufferConditionMessage(HasBufferConditionMessage other) : this() {
      bufferId_ = other.bufferId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HasBufferConditionMessage Clone() {
      return new HasBufferConditionMessage(this);
    }

    /// <summary>Field number for the "bufferId" field.</summary>
    public const int BufferIdFieldNumber = 1;
    private int bufferId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BufferId {
      get { return bufferId_; }
      set {
        bufferId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HasBufferConditionMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HasBufferConditionMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BufferId != other.BufferId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BufferId != 0) hash ^= BufferId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BufferId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BufferId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BufferId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BufferId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HasBufferConditionMessage other) {
      if (other == null) {
        return;
      }
      if (other.BufferId != 0) {
        BufferId = other.BufferId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BufferId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// ==========ShellDefinition==========
  /// </summary>
  public sealed partial class ShellDefinitionMessage : pb::IMessage<ShellDefinitionMessage> {
    private static readonly pb::MessageParser<ShellDefinitionMessage> _parser = new pb::MessageParser<ShellDefinitionMessage>(() => new ShellDefinitionMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShellDefinitionMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMain.Runtime.GameMainProtocolReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShellDefinitionMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShellDefinitionMessage(ShellDefinitionMessage other) : this() {
      id_ = other.id_;
      effectId_ = other.effectId_;
      duration_ = other.duration_;
      childInfos_ = other.childInfos_.Clone();
      attackDefinitionInfo_ = other.attackDefinitionInfo_ != null ? other.attackDefinitionInfo_.Clone() : null;
      numericalValues_ = other.numericalValues_.Clone();
      shellType_ = other.shellType_;
      switch (other.ShellConfigCase) {
        case ShellConfigOneofCase.Bullet:
          Bullet = other.Bullet.Clone();
          break;
        case ShellConfigOneofCase.Area:
          Area = other.Area.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShellDefinitionMessage Clone() {
      return new ShellDefinitionMessage(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "effectId" field.</summary>
    public const int EffectIdFieldNumber = 2;
    private string effectId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EffectId {
      get { return effectId_; }
      set {
        effectId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 3;
    private float duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "childInfos" field.</summary>
    public const int ChildInfosFieldNumber = 30;
    private static readonly pb::FieldCodec<global::GameMain.Runtime.ShellDefinitionChildInfoMessage> _repeated_childInfos_codec
        = pb::FieldCodec.ForMessage(242, global::GameMain.Runtime.ShellDefinitionChildInfoMessage.Parser);
    private readonly pbc::RepeatedField<global::GameMain.Runtime.ShellDefinitionChildInfoMessage> childInfos_ = new pbc::RepeatedField<global::GameMain.Runtime.ShellDefinitionChildInfoMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameMain.Runtime.ShellDefinitionChildInfoMessage> ChildInfos {
      get { return childInfos_; }
    }

    /// <summary>Field number for the "attackDefinitionInfo" field.</summary>
    public const int AttackDefinitionInfoFieldNumber = 98;
    private global::GameMain.Runtime.AttackDefinitionInfoMessage attackDefinitionInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameMain.Runtime.AttackDefinitionInfoMessage AttackDefinitionInfo {
      get { return attackDefinitionInfo_; }
      set {
        attackDefinitionInfo_ = value;
      }
    }

    /// <summary>Field number for the "numericalValues" field.</summary>
    public const int NumericalValuesFieldNumber = 99;
    private static readonly pb::FieldCodec<global::GameMain.Runtime.NumericalMessage> _repeated_numericalValues_codec
        = pb::FieldCodec.ForMessage(794, global::GameMain.Runtime.NumericalMessage.Parser);
    private readonly pbc::RepeatedField<global::GameMain.Runtime.NumericalMessage> numericalValues_ = new pbc::RepeatedField<global::GameMain.Runtime.NumericalMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameMain.Runtime.NumericalMessage> NumericalValues {
      get { return numericalValues_; }
    }

    /// <summary>Field number for the "shellType" field.</summary>
    public const int ShellTypeFieldNumber = 100;
    private int shellType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ShellType {
      get { return shellType_; }
      set {
        shellType_ = value;
      }
    }

    /// <summary>Field number for the "bullet" field.</summary>
    public const int BulletFieldNumber = 101;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameMain.Runtime.ShellBulletDefinitionMessage Bullet {
      get { return shellConfigCase_ == ShellConfigOneofCase.Bullet ? (global::GameMain.Runtime.ShellBulletDefinitionMessage) shellConfig_ : null; }
      set {
        shellConfig_ = value;
        shellConfigCase_ = value == null ? ShellConfigOneofCase.None : ShellConfigOneofCase.Bullet;
      }
    }

    /// <summary>Field number for the "area" field.</summary>
    public const int AreaFieldNumber = 102;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameMain.Runtime.ShellAreaDefinitionMessage Area {
      get { return shellConfigCase_ == ShellConfigOneofCase.Area ? (global::GameMain.Runtime.ShellAreaDefinitionMessage) shellConfig_ : null; }
      set {
        shellConfig_ = value;
        shellConfigCase_ = value == null ? ShellConfigOneofCase.None : ShellConfigOneofCase.Area;
      }
    }

    private object shellConfig_;
    /// <summary>Enum of possible cases for the "shellConfig" oneof.</summary>
    public enum ShellConfigOneofCase {
      None = 0,
      Bullet = 101,
      Area = 102,
    }
    private ShellConfigOneofCase shellConfigCase_ = ShellConfigOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShellConfigOneofCase ShellConfigCase {
      get { return shellConfigCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearShellConfig() {
      shellConfigCase_ = ShellConfigOneofCase.None;
      shellConfig_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShellDefinitionMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShellDefinitionMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (EffectId != other.EffectId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Duration, other.Duration)) return false;
      if(!childInfos_.Equals(other.childInfos_)) return false;
      if (!object.Equals(AttackDefinitionInfo, other.AttackDefinitionInfo)) return false;
      if(!numericalValues_.Equals(other.numericalValues_)) return false;
      if (ShellType != other.ShellType) return false;
      if (!object.Equals(Bullet, other.Bullet)) return false;
      if (!object.Equals(Area, other.Area)) return false;
      if (ShellConfigCase != other.ShellConfigCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (EffectId.Length != 0) hash ^= EffectId.GetHashCode();
      if (Duration != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Duration);
      hash ^= childInfos_.GetHashCode();
      if (attackDefinitionInfo_ != null) hash ^= AttackDefinitionInfo.GetHashCode();
      hash ^= numericalValues_.GetHashCode();
      if (ShellType != 0) hash ^= ShellType.GetHashCode();
      if (shellConfigCase_ == ShellConfigOneofCase.Bullet) hash ^= Bullet.GetHashCode();
      if (shellConfigCase_ == ShellConfigOneofCase.Area) hash ^= Area.GetHashCode();
      hash ^= (int) shellConfigCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (EffectId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(EffectId);
      }
      if (Duration != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Duration);
      }
      childInfos_.WriteTo(output, _repeated_childInfos_codec);
      if (attackDefinitionInfo_ != null) {
        output.WriteRawTag(146, 6);
        output.WriteMessage(AttackDefinitionInfo);
      }
      numericalValues_.WriteTo(output, _repeated_numericalValues_codec);
      if (ShellType != 0) {
        output.WriteRawTag(160, 6);
        output.WriteInt32(ShellType);
      }
      if (shellConfigCase_ == ShellConfigOneofCase.Bullet) {
        output.WriteRawTag(170, 6);
        output.WriteMessage(Bullet);
      }
      if (shellConfigCase_ == ShellConfigOneofCase.Area) {
        output.WriteRawTag(178, 6);
        output.WriteMessage(Area);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (EffectId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EffectId);
      }
      if (Duration != 0F) {
        size += 1 + 4;
      }
      size += childInfos_.CalculateSize(_repeated_childInfos_codec);
      if (attackDefinitionInfo_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AttackDefinitionInfo);
      }
      size += numericalValues_.CalculateSize(_repeated_numericalValues_codec);
      if (ShellType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ShellType);
      }
      if (shellConfigCase_ == ShellConfigOneofCase.Bullet) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Bullet);
      }
      if (shellConfigCase_ == ShellConfigOneofCase.Area) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Area);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShellDefinitionMessage other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.EffectId.Length != 0) {
        EffectId = other.EffectId;
      }
      if (other.Duration != 0F) {
        Duration = other.Duration;
      }
      childInfos_.Add(other.childInfos_);
      if (other.attackDefinitionInfo_ != null) {
        if (attackDefinitionInfo_ == null) {
          AttackDefinitionInfo = new global::GameMain.Runtime.AttackDefinitionInfoMessage();
        }
        AttackDefinitionInfo.MergeFrom(other.AttackDefinitionInfo);
      }
      numericalValues_.Add(other.numericalValues_);
      if (other.ShellType != 0) {
        ShellType = other.ShellType;
      }
      switch (other.ShellConfigCase) {
        case ShellConfigOneofCase.Bullet:
          if (Bullet == null) {
            Bullet = new global::GameMain.Runtime.ShellBulletDefinitionMessage();
          }
          Bullet.MergeFrom(other.Bullet);
          break;
        case ShellConfigOneofCase.Area:
          if (Area == null) {
            Area = new global::GameMain.Runtime.ShellAreaDefinitionMessage();
          }
          Area.MergeFrom(other.Area);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            EffectId = input.ReadString();
            break;
          }
          case 29: {
            Duration = input.ReadFloat();
            break;
          }
          case 242: {
            childInfos_.AddEntriesFrom(input, _repeated_childInfos_codec);
            break;
          }
          case 786: {
            if (attackDefinitionInfo_ == null) {
              AttackDefinitionInfo = new global::GameMain.Runtime.AttackDefinitionInfoMessage();
            }
            input.ReadMessage(AttackDefinitionInfo);
            break;
          }
          case 794: {
            numericalValues_.AddEntriesFrom(input, _repeated_numericalValues_codec);
            break;
          }
          case 800: {
            ShellType = input.ReadInt32();
            break;
          }
          case 810: {
            global::GameMain.Runtime.ShellBulletDefinitionMessage subBuilder = new global::GameMain.Runtime.ShellBulletDefinitionMessage();
            if (shellConfigCase_ == ShellConfigOneofCase.Bullet) {
              subBuilder.MergeFrom(Bullet);
            }
            input.ReadMessage(subBuilder);
            Bullet = subBuilder;
            break;
          }
          case 818: {
            global::GameMain.Runtime.ShellAreaDefinitionMessage subBuilder = new global::GameMain.Runtime.ShellAreaDefinitionMessage();
            if (shellConfigCase_ == ShellConfigOneofCase.Area) {
              subBuilder.MergeFrom(Area);
            }
            input.ReadMessage(subBuilder);
            Area = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class ShellDefinitionChildInfoMessage : pb::IMessage<ShellDefinitionChildInfoMessage> {
    private static readonly pb::MessageParser<ShellDefinitionChildInfoMessage> _parser = new pb::MessageParser<ShellDefinitionChildInfoMessage>(() => new ShellDefinitionChildInfoMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShellDefinitionChildInfoMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMain.Runtime.GameMainProtocolReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShellDefinitionChildInfoMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShellDefinitionChildInfoMessage(ShellDefinitionChildInfoMessage other) : this() {
      childShellId_ = other.childShellId_;
      childGenerationOffset_ = other.childGenerationOffset_ != null ? other.childGenerationOffset_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShellDefinitionChildInfoMessage Clone() {
      return new ShellDefinitionChildInfoMessage(this);
    }

    /// <summary>Field number for the "childShellId" field.</summary>
    public const int ChildShellIdFieldNumber = 1;
    private int childShellId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ChildShellId {
      get { return childShellId_; }
      set {
        childShellId_ = value;
      }
    }

    /// <summary>Field number for the "childGenerationOffset" field.</summary>
    public const int ChildGenerationOffsetFieldNumber = 2;
    private global::Akari.GfGame.GfFloat3Message childGenerationOffset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akari.GfGame.GfFloat3Message ChildGenerationOffset {
      get { return childGenerationOffset_; }
      set {
        childGenerationOffset_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShellDefinitionChildInfoMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShellDefinitionChildInfoMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChildShellId != other.ChildShellId) return false;
      if (!object.Equals(ChildGenerationOffset, other.ChildGenerationOffset)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChildShellId != 0) hash ^= ChildShellId.GetHashCode();
      if (childGenerationOffset_ != null) hash ^= ChildGenerationOffset.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChildShellId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChildShellId);
      }
      if (childGenerationOffset_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ChildGenerationOffset);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChildShellId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChildShellId);
      }
      if (childGenerationOffset_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ChildGenerationOffset);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShellDefinitionChildInfoMessage other) {
      if (other == null) {
        return;
      }
      if (other.ChildShellId != 0) {
        ChildShellId = other.ChildShellId;
      }
      if (other.childGenerationOffset_ != null) {
        if (childGenerationOffset_ == null) {
          ChildGenerationOffset = new global::Akari.GfGame.GfFloat3Message();
        }
        ChildGenerationOffset.MergeFrom(other.ChildGenerationOffset);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChildShellId = input.ReadInt32();
            break;
          }
          case 18: {
            if (childGenerationOffset_ == null) {
              ChildGenerationOffset = new global::Akari.GfGame.GfFloat3Message();
            }
            input.ReadMessage(ChildGenerationOffset);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ShellBulletDefinitionMessage : pb::IMessage<ShellBulletDefinitionMessage> {
    private static readonly pb::MessageParser<ShellBulletDefinitionMessage> _parser = new pb::MessageParser<ShellBulletDefinitionMessage>(() => new ShellBulletDefinitionMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShellBulletDefinitionMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMain.Runtime.GameMainProtocolReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShellBulletDefinitionMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShellBulletDefinitionMessage(ShellBulletDefinitionMessage other) : this() {
      speed_ = other.speed_;
      bulletType_ = other.bulletType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShellBulletDefinitionMessage Clone() {
      return new ShellBulletDefinitionMessage(this);
    }

    /// <summary>Field number for the "speed" field.</summary>
    public const int SpeedFieldNumber = 1;
    private int speed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "bulletType" field.</summary>
    public const int BulletTypeFieldNumber = 2;
    private int bulletType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BulletType {
      get { return bulletType_; }
      set {
        bulletType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShellBulletDefinitionMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShellBulletDefinitionMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Speed != other.Speed) return false;
      if (BulletType != other.BulletType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Speed != 0) hash ^= Speed.GetHashCode();
      if (BulletType != 0) hash ^= BulletType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Speed != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Speed);
      }
      if (BulletType != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BulletType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Speed != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Speed);
      }
      if (BulletType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BulletType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShellBulletDefinitionMessage other) {
      if (other == null) {
        return;
      }
      if (other.Speed != 0) {
        Speed = other.Speed;
      }
      if (other.BulletType != 0) {
        BulletType = other.BulletType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Speed = input.ReadInt32();
            break;
          }
          case 16: {
            BulletType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ShellAreaDefinitionMessage : pb::IMessage<ShellAreaDefinitionMessage> {
    private static readonly pb::MessageParser<ShellAreaDefinitionMessage> _parser = new pb::MessageParser<ShellAreaDefinitionMessage>(() => new ShellAreaDefinitionMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShellAreaDefinitionMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMain.Runtime.GameMainProtocolReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShellAreaDefinitionMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShellAreaDefinitionMessage(ShellAreaDefinitionMessage other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShellAreaDefinitionMessage Clone() {
      return new ShellAreaDefinitionMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShellAreaDefinitionMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShellAreaDefinitionMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShellAreaDefinitionMessage other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  ///==========Numerical==========
  /// </summary>
  public sealed partial class NumericalMessage : pb::IMessage<NumericalMessage> {
    private static readonly pb::MessageParser<NumericalMessage> _parser = new pb::MessageParser<NumericalMessage>(() => new NumericalMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NumericalMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMain.Runtime.GameMainProtocolReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NumericalMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NumericalMessage(NumericalMessage other) : this() {
      excel_ = other.excel_;
      local_ = other.local_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NumericalMessage Clone() {
      return new NumericalMessage(this);
    }

    /// <summary>Field number for the "excel" field.</summary>
    public const int ExcelFieldNumber = 1;
    private int excel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Excel {
      get { return excel_; }
      set {
        excel_ = value;
      }
    }

    /// <summary>Field number for the "local" field.</summary>
    public const int LocalFieldNumber = 2;
    private int local_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Local {
      get { return local_; }
      set {
        local_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NumericalMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NumericalMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Excel != other.Excel) return false;
      if (Local != other.Local) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Excel != 0) hash ^= Excel.GetHashCode();
      if (Local != 0) hash ^= Local.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Excel != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Excel);
      }
      if (Local != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Local);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Excel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Excel);
      }
      if (Local != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Local);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NumericalMessage other) {
      if (other == null) {
        return;
      }
      if (other.Excel != 0) {
        Excel = other.Excel;
      }
      if (other.Local != 0) {
        Local = other.Local;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Excel = input.ReadInt32();
            break;
          }
          case 16: {
            Local = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
