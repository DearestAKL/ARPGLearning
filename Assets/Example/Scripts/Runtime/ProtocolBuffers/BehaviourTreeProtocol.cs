// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protobuf/BehaviourTreeProtocol.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace GameMain.Runtime {

  /// <summary>Holder for reflection information generated from Protobuf/BehaviourTreeProtocol.proto</summary>
  public static partial class BehaviourTreeProtocolReflection {

    #region Descriptor
    /// <summary>File descriptor for Protobuf/BehaviourTreeProtocol.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BehaviourTreeProtocolReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiRQcm90b2J1Zi9CZWhhdmlvdXJUcmVlUHJvdG9jb2wucHJvdG8SCEdhbWVN",
            "YWluIpMBChVHZkJ0RmlsZUhlYWRlck1lc3NhZ2USEQoJbm9kZVR5cGVzGAEg",
            "AygFEhUKDXByb3BlcnR5VHlwZXMYAiADKAUSFgoOc3RhcnROb2RlSW5kZXgY",
            "AyABKAUSOAoNUHJvcGVydHlFZGdlcxgEIAMoCzIhLkdhbWVNYWluLkdmQnRQ",
            "cm9wZXJ0eUVkZ2VNZXNzYWdlIkMKF0dmQnRQcm9wZXJ0eUVkZ2VNZXNzYWdl",
            "EhUKDXByb3BlcnR5SW5kZXgYASABKAUSEQoJbm9kZUluZGV4GAIgASgFIiAK",
            "D0dmQnRCYXNlTWVzc2FnZRINCgVpbmRleBgBIAEoBSIoChRHZkJ0Q29tcG9z",
            "aXRlTWVzc2FnZRIQCghjaGlsZHJlbhgBIAMoBSIhChBHZkJ0U3RhcnRNZXNz",
            "YWdlEg0KBWNoaWxkGAEgASgFInYKE0dmQnRQYXJhbGxlbE1lc3NhZ2USMQoJ",
            "Y29tcG9zaXRlGAEgASgLMh4uR2FtZU1haW4uR2ZCdENvbXBvc2l0ZU1lc3Nh",
            "Z2USFQoNZmFpbHVyZVBvbGljeRgCIAEoBRIVCg1zdWNjZXNzUG9saWN5GAMg",
            "ASgFIlgKE0dmQnRTZWxlY3Rvck1lc3NhZ2USMQoJY29tcG9zaXRlGAEgASgL",
            "Mh4uR2FtZU1haW4uR2ZCdENvbXBvc2l0ZU1lc3NhZ2USDgoGcmFuZG9tGAIg",
            "ASgIIlkKFEdmQnRTZXF1ZW5jZXJNZXNzYWdlEjEKCWNvbXBvc2l0ZRgBIAEo",
            "CzIeLkdhbWVNYWluLkdmQnRDb21wb3NpdGVNZXNzYWdlEg4KBnJhbmRvbRgC",
            "IAEoCCIjChNHZkJ0UHJvcGVydHlNZXNzYWdlEgwKBHR5cGUYASABKAUiOQoN",
            "QnRXYWl0TWVzc2FnZRIQCghkdXJhdGlvbhgBIAEoAhIWCg5yYW5kb21WYXJp",
            "YW5jZRgCIAEoAiIhCg5CdERlYnVnTWVzc2FnZRIPCgdtZXNzYWdlGAEgASgJ",
            "IhgKFkJ0Q2hhcmFjdGVySWRsZU1lc3NhZ2UiGAoWQnRDaGFyYWN0ZXJNb3Zl",
            "TWVzc2FnZSIaChhCdENoYXJhY3RlclBhdHJvbE1lc3NhZ2UiOQokQnRDaGFy",
            "YWN0ZXJQbGF5QW5pbWF0aW9uU3RhdGVNZXNzYWdlEhEKCXN0YXRlTmFtZRgB",
            "IAEoCSJEChhCdENoYXJhY3RlckZvbGxvd01lc3NhZ2USEwoLbWluRGlzdGFu",
            "Y2UYASABKAUSEwoLbWF4RGlzdGFuY2UYAiABKAUiMgoUQnRQcm9wZXJ0eUlu",
            "dE1lc3NhZ2USCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgFIjcKF0J0UHJv",
            "cGVydHlTdHJpbmdNZXNzYWdlEgsKA2tleRgBIAEoCRIPCgdjb250ZW50GAIg",
            "ASgJIlUKFkJ0QmFzZUNvbmRpdGlvbk1lc3NhZ2USDQoFY2hpbGQYASABKAUS",
            "EAoIb3BlcmF0b3IYAiABKAUSDQoFc3RvcHMYAyABKAUSCwoDa2V5GAQgASgJ",
            "Il0KF0J0RmxvYXRDb25kaXRpb25NZXNzYWdlEi4KBGJhc2UYASABKAsyIC5H",
            "YW1lTWFpbi5CdEJhc2VDb25kaXRpb25NZXNzYWdlEhIKCmZsb2F0VmFsdWUY",
            "AiABKAIiWwoWQnRCb29sQ29uZGl0aW9uTWVzc2FnZRIuCgRiYXNlGAEgASgL",
            "MiAuR2FtZU1haW4uQnRCYXNlQ29uZGl0aW9uTWVzc2FnZRIRCglib29sVmFs",
            "dWUYAiABKAgiPAoZQnRDaGFyYWN0ZXJTZXJ2aWNlTWVzc2FnZRINCgVjaGls",
            "ZBgBIAEoBRIQCghpbnRlcnZhbBgCIAEoAiI3ChZCdENoYXJhY3RlclNlZWtN",
            "ZXNzYWdlEg4KBnJhZGl1cxgBIAEoAhINCgVhbmdsZRgCIAEoBUITqgIQR2Ft",
            "ZU1haW4uUnVudGltZWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMain.Runtime.GfBtFileHeaderMessage), global::GameMain.Runtime.GfBtFileHeaderMessage.Parser, new[]{ "NodeTypes", "PropertyTypes", "StartNodeIndex", "PropertyEdges" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMain.Runtime.GfBtPropertyEdgeMessage), global::GameMain.Runtime.GfBtPropertyEdgeMessage.Parser, new[]{ "PropertyIndex", "NodeIndex" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMain.Runtime.GfBtBaseMessage), global::GameMain.Runtime.GfBtBaseMessage.Parser, new[]{ "Index" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMain.Runtime.GfBtCompositeMessage), global::GameMain.Runtime.GfBtCompositeMessage.Parser, new[]{ "Children" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMain.Runtime.GfBtStartMessage), global::GameMain.Runtime.GfBtStartMessage.Parser, new[]{ "Child" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMain.Runtime.GfBtParallelMessage), global::GameMain.Runtime.GfBtParallelMessage.Parser, new[]{ "Composite", "FailurePolicy", "SuccessPolicy" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMain.Runtime.GfBtSelectorMessage), global::GameMain.Runtime.GfBtSelectorMessage.Parser, new[]{ "Composite", "Random" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMain.Runtime.GfBtSequencerMessage), global::GameMain.Runtime.GfBtSequencerMessage.Parser, new[]{ "Composite", "Random" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMain.Runtime.GfBtPropertyMessage), global::GameMain.Runtime.GfBtPropertyMessage.Parser, new[]{ "Type" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMain.Runtime.BtWaitMessage), global::GameMain.Runtime.BtWaitMessage.Parser, new[]{ "Duration", "RandomVariance" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMain.Runtime.BtDebugMessage), global::GameMain.Runtime.BtDebugMessage.Parser, new[]{ "Message" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMain.Runtime.BtCharacterIdleMessage), global::GameMain.Runtime.BtCharacterIdleMessage.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMain.Runtime.BtCharacterMoveMessage), global::GameMain.Runtime.BtCharacterMoveMessage.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMain.Runtime.BtCharacterPatrolMessage), global::GameMain.Runtime.BtCharacterPatrolMessage.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMain.Runtime.BtCharacterPlayAnimationStateMessage), global::GameMain.Runtime.BtCharacterPlayAnimationStateMessage.Parser, new[]{ "StateName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMain.Runtime.BtCharacterFollowMessage), global::GameMain.Runtime.BtCharacterFollowMessage.Parser, new[]{ "MinDistance", "MaxDistance" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMain.Runtime.BtPropertyIntMessage), global::GameMain.Runtime.BtPropertyIntMessage.Parser, new[]{ "Key", "Value" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMain.Runtime.BtPropertyStringMessage), global::GameMain.Runtime.BtPropertyStringMessage.Parser, new[]{ "Key", "Content" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMain.Runtime.BtBaseConditionMessage), global::GameMain.Runtime.BtBaseConditionMessage.Parser, new[]{ "Child", "Operator", "Stops", "Key" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMain.Runtime.BtFloatConditionMessage), global::GameMain.Runtime.BtFloatConditionMessage.Parser, new[]{ "Base", "FloatValue" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMain.Runtime.BtBoolConditionMessage), global::GameMain.Runtime.BtBoolConditionMessage.Parser, new[]{ "Base", "BoolValue" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMain.Runtime.BtCharacterServiceMessage), global::GameMain.Runtime.BtCharacterServiceMessage.Parser, new[]{ "Child", "Interval" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GameMain.Runtime.BtCharacterSeekMessage), global::GameMain.Runtime.BtCharacterSeekMessage.Parser, new[]{ "Radius", "Angle" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///==========Base==========
  /// </summary>
  public sealed partial class GfBtFileHeaderMessage : pb::IMessage<GfBtFileHeaderMessage> {
    private static readonly pb::MessageParser<GfBtFileHeaderMessage> _parser = new pb::MessageParser<GfBtFileHeaderMessage>(() => new GfBtFileHeaderMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GfBtFileHeaderMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMain.Runtime.BehaviourTreeProtocolReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GfBtFileHeaderMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GfBtFileHeaderMessage(GfBtFileHeaderMessage other) : this() {
      nodeTypes_ = other.nodeTypes_.Clone();
      propertyTypes_ = other.propertyTypes_.Clone();
      startNodeIndex_ = other.startNodeIndex_;
      propertyEdges_ = other.propertyEdges_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GfBtFileHeaderMessage Clone() {
      return new GfBtFileHeaderMessage(this);
    }

    /// <summary>Field number for the "nodeTypes" field.</summary>
    public const int NodeTypesFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_nodeTypes_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> nodeTypes_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> NodeTypes {
      get { return nodeTypes_; }
    }

    /// <summary>Field number for the "propertyTypes" field.</summary>
    public const int PropertyTypesFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_propertyTypes_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> propertyTypes_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> PropertyTypes {
      get { return propertyTypes_; }
    }

    /// <summary>Field number for the "startNodeIndex" field.</summary>
    public const int StartNodeIndexFieldNumber = 3;
    private int startNodeIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartNodeIndex {
      get { return startNodeIndex_; }
      set {
        startNodeIndex_ = value;
      }
    }

    /// <summary>Field number for the "PropertyEdges" field.</summary>
    public const int PropertyEdgesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::GameMain.Runtime.GfBtPropertyEdgeMessage> _repeated_propertyEdges_codec
        = pb::FieldCodec.ForMessage(34, global::GameMain.Runtime.GfBtPropertyEdgeMessage.Parser);
    private readonly pbc::RepeatedField<global::GameMain.Runtime.GfBtPropertyEdgeMessage> propertyEdges_ = new pbc::RepeatedField<global::GameMain.Runtime.GfBtPropertyEdgeMessage>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GameMain.Runtime.GfBtPropertyEdgeMessage> PropertyEdges {
      get { return propertyEdges_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GfBtFileHeaderMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GfBtFileHeaderMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!nodeTypes_.Equals(other.nodeTypes_)) return false;
      if(!propertyTypes_.Equals(other.propertyTypes_)) return false;
      if (StartNodeIndex != other.StartNodeIndex) return false;
      if(!propertyEdges_.Equals(other.propertyEdges_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= nodeTypes_.GetHashCode();
      hash ^= propertyTypes_.GetHashCode();
      if (StartNodeIndex != 0) hash ^= StartNodeIndex.GetHashCode();
      hash ^= propertyEdges_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      nodeTypes_.WriteTo(output, _repeated_nodeTypes_codec);
      propertyTypes_.WriteTo(output, _repeated_propertyTypes_codec);
      if (StartNodeIndex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(StartNodeIndex);
      }
      propertyEdges_.WriteTo(output, _repeated_propertyEdges_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += nodeTypes_.CalculateSize(_repeated_nodeTypes_codec);
      size += propertyTypes_.CalculateSize(_repeated_propertyTypes_codec);
      if (StartNodeIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartNodeIndex);
      }
      size += propertyEdges_.CalculateSize(_repeated_propertyEdges_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GfBtFileHeaderMessage other) {
      if (other == null) {
        return;
      }
      nodeTypes_.Add(other.nodeTypes_);
      propertyTypes_.Add(other.propertyTypes_);
      if (other.StartNodeIndex != 0) {
        StartNodeIndex = other.StartNodeIndex;
      }
      propertyEdges_.Add(other.propertyEdges_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            nodeTypes_.AddEntriesFrom(input, _repeated_nodeTypes_codec);
            break;
          }
          case 18:
          case 16: {
            propertyTypes_.AddEntriesFrom(input, _repeated_propertyTypes_codec);
            break;
          }
          case 24: {
            StartNodeIndex = input.ReadInt32();
            break;
          }
          case 34: {
            propertyEdges_.AddEntriesFrom(input, _repeated_propertyEdges_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GfBtPropertyEdgeMessage : pb::IMessage<GfBtPropertyEdgeMessage> {
    private static readonly pb::MessageParser<GfBtPropertyEdgeMessage> _parser = new pb::MessageParser<GfBtPropertyEdgeMessage>(() => new GfBtPropertyEdgeMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GfBtPropertyEdgeMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMain.Runtime.BehaviourTreeProtocolReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GfBtPropertyEdgeMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GfBtPropertyEdgeMessage(GfBtPropertyEdgeMessage other) : this() {
      propertyIndex_ = other.propertyIndex_;
      nodeIndex_ = other.nodeIndex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GfBtPropertyEdgeMessage Clone() {
      return new GfBtPropertyEdgeMessage(this);
    }

    /// <summary>Field number for the "propertyIndex" field.</summary>
    public const int PropertyIndexFieldNumber = 1;
    private int propertyIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PropertyIndex {
      get { return propertyIndex_; }
      set {
        propertyIndex_ = value;
      }
    }

    /// <summary>Field number for the "nodeIndex" field.</summary>
    public const int NodeIndexFieldNumber = 2;
    private int nodeIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NodeIndex {
      get { return nodeIndex_; }
      set {
        nodeIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GfBtPropertyEdgeMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GfBtPropertyEdgeMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PropertyIndex != other.PropertyIndex) return false;
      if (NodeIndex != other.NodeIndex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PropertyIndex != 0) hash ^= PropertyIndex.GetHashCode();
      if (NodeIndex != 0) hash ^= NodeIndex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PropertyIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PropertyIndex);
      }
      if (NodeIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NodeIndex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PropertyIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PropertyIndex);
      }
      if (NodeIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NodeIndex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GfBtPropertyEdgeMessage other) {
      if (other == null) {
        return;
      }
      if (other.PropertyIndex != 0) {
        PropertyIndex = other.PropertyIndex;
      }
      if (other.NodeIndex != 0) {
        NodeIndex = other.NodeIndex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PropertyIndex = input.ReadInt32();
            break;
          }
          case 16: {
            NodeIndex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GfBtBaseMessage : pb::IMessage<GfBtBaseMessage> {
    private static readonly pb::MessageParser<GfBtBaseMessage> _parser = new pb::MessageParser<GfBtBaseMessage>(() => new GfBtBaseMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GfBtBaseMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMain.Runtime.BehaviourTreeProtocolReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GfBtBaseMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GfBtBaseMessage(GfBtBaseMessage other) : this() {
      index_ = other.index_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GfBtBaseMessage Clone() {
      return new GfBtBaseMessage(this);
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GfBtBaseMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GfBtBaseMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GfBtBaseMessage other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GfBtCompositeMessage : pb::IMessage<GfBtCompositeMessage> {
    private static readonly pb::MessageParser<GfBtCompositeMessage> _parser = new pb::MessageParser<GfBtCompositeMessage>(() => new GfBtCompositeMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GfBtCompositeMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMain.Runtime.BehaviourTreeProtocolReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GfBtCompositeMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GfBtCompositeMessage(GfBtCompositeMessage other) : this() {
      children_ = other.children_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GfBtCompositeMessage Clone() {
      return new GfBtCompositeMessage(this);
    }

    /// <summary>Field number for the "children" field.</summary>
    public const int ChildrenFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_children_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> children_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Children {
      get { return children_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GfBtCompositeMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GfBtCompositeMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!children_.Equals(other.children_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= children_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      children_.WriteTo(output, _repeated_children_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += children_.CalculateSize(_repeated_children_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GfBtCompositeMessage other) {
      if (other == null) {
        return;
      }
      children_.Add(other.children_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            children_.AddEntriesFrom(input, _repeated_children_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GfBtStartMessage : pb::IMessage<GfBtStartMessage> {
    private static readonly pb::MessageParser<GfBtStartMessage> _parser = new pb::MessageParser<GfBtStartMessage>(() => new GfBtStartMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GfBtStartMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMain.Runtime.BehaviourTreeProtocolReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GfBtStartMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GfBtStartMessage(GfBtStartMessage other) : this() {
      child_ = other.child_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GfBtStartMessage Clone() {
      return new GfBtStartMessage(this);
    }

    /// <summary>Field number for the "child" field.</summary>
    public const int ChildFieldNumber = 1;
    private int child_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Child {
      get { return child_; }
      set {
        child_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GfBtStartMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GfBtStartMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Child != other.Child) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Child != 0) hash ^= Child.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Child != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Child);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Child != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Child);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GfBtStartMessage other) {
      if (other == null) {
        return;
      }
      if (other.Child != 0) {
        Child = other.Child;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Child = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GfBtParallelMessage : pb::IMessage<GfBtParallelMessage> {
    private static readonly pb::MessageParser<GfBtParallelMessage> _parser = new pb::MessageParser<GfBtParallelMessage>(() => new GfBtParallelMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GfBtParallelMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMain.Runtime.BehaviourTreeProtocolReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GfBtParallelMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GfBtParallelMessage(GfBtParallelMessage other) : this() {
      composite_ = other.composite_ != null ? other.composite_.Clone() : null;
      failurePolicy_ = other.failurePolicy_;
      successPolicy_ = other.successPolicy_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GfBtParallelMessage Clone() {
      return new GfBtParallelMessage(this);
    }

    /// <summary>Field number for the "composite" field.</summary>
    public const int CompositeFieldNumber = 1;
    private global::GameMain.Runtime.GfBtCompositeMessage composite_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameMain.Runtime.GfBtCompositeMessage Composite {
      get { return composite_; }
      set {
        composite_ = value;
      }
    }

    /// <summary>Field number for the "failurePolicy" field.</summary>
    public const int FailurePolicyFieldNumber = 2;
    private int failurePolicy_;
    /// <summary>
    ///ONE = 0,ALL = 1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FailurePolicy {
      get { return failurePolicy_; }
      set {
        failurePolicy_ = value;
      }
    }

    /// <summary>Field number for the "successPolicy" field.</summary>
    public const int SuccessPolicyFieldNumber = 3;
    private int successPolicy_;
    /// <summary>
    ///ONE = 0,ALL = 1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SuccessPolicy {
      get { return successPolicy_; }
      set {
        successPolicy_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GfBtParallelMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GfBtParallelMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Composite, other.Composite)) return false;
      if (FailurePolicy != other.FailurePolicy) return false;
      if (SuccessPolicy != other.SuccessPolicy) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (composite_ != null) hash ^= Composite.GetHashCode();
      if (FailurePolicy != 0) hash ^= FailurePolicy.GetHashCode();
      if (SuccessPolicy != 0) hash ^= SuccessPolicy.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (composite_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Composite);
      }
      if (FailurePolicy != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(FailurePolicy);
      }
      if (SuccessPolicy != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SuccessPolicy);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (composite_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Composite);
      }
      if (FailurePolicy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FailurePolicy);
      }
      if (SuccessPolicy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SuccessPolicy);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GfBtParallelMessage other) {
      if (other == null) {
        return;
      }
      if (other.composite_ != null) {
        if (composite_ == null) {
          Composite = new global::GameMain.Runtime.GfBtCompositeMessage();
        }
        Composite.MergeFrom(other.Composite);
      }
      if (other.FailurePolicy != 0) {
        FailurePolicy = other.FailurePolicy;
      }
      if (other.SuccessPolicy != 0) {
        SuccessPolicy = other.SuccessPolicy;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (composite_ == null) {
              Composite = new global::GameMain.Runtime.GfBtCompositeMessage();
            }
            input.ReadMessage(Composite);
            break;
          }
          case 16: {
            FailurePolicy = input.ReadInt32();
            break;
          }
          case 24: {
            SuccessPolicy = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GfBtSelectorMessage : pb::IMessage<GfBtSelectorMessage> {
    private static readonly pb::MessageParser<GfBtSelectorMessage> _parser = new pb::MessageParser<GfBtSelectorMessage>(() => new GfBtSelectorMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GfBtSelectorMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMain.Runtime.BehaviourTreeProtocolReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GfBtSelectorMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GfBtSelectorMessage(GfBtSelectorMessage other) : this() {
      composite_ = other.composite_ != null ? other.composite_.Clone() : null;
      random_ = other.random_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GfBtSelectorMessage Clone() {
      return new GfBtSelectorMessage(this);
    }

    /// <summary>Field number for the "composite" field.</summary>
    public const int CompositeFieldNumber = 1;
    private global::GameMain.Runtime.GfBtCompositeMessage composite_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameMain.Runtime.GfBtCompositeMessage Composite {
      get { return composite_; }
      set {
        composite_ = value;
      }
    }

    /// <summary>Field number for the "random" field.</summary>
    public const int RandomFieldNumber = 2;
    private bool random_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Random {
      get { return random_; }
      set {
        random_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GfBtSelectorMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GfBtSelectorMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Composite, other.Composite)) return false;
      if (Random != other.Random) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (composite_ != null) hash ^= Composite.GetHashCode();
      if (Random != false) hash ^= Random.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (composite_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Composite);
      }
      if (Random != false) {
        output.WriteRawTag(16);
        output.WriteBool(Random);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (composite_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Composite);
      }
      if (Random != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GfBtSelectorMessage other) {
      if (other == null) {
        return;
      }
      if (other.composite_ != null) {
        if (composite_ == null) {
          Composite = new global::GameMain.Runtime.GfBtCompositeMessage();
        }
        Composite.MergeFrom(other.Composite);
      }
      if (other.Random != false) {
        Random = other.Random;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (composite_ == null) {
              Composite = new global::GameMain.Runtime.GfBtCompositeMessage();
            }
            input.ReadMessage(Composite);
            break;
          }
          case 16: {
            Random = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GfBtSequencerMessage : pb::IMessage<GfBtSequencerMessage> {
    private static readonly pb::MessageParser<GfBtSequencerMessage> _parser = new pb::MessageParser<GfBtSequencerMessage>(() => new GfBtSequencerMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GfBtSequencerMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMain.Runtime.BehaviourTreeProtocolReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GfBtSequencerMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GfBtSequencerMessage(GfBtSequencerMessage other) : this() {
      composite_ = other.composite_ != null ? other.composite_.Clone() : null;
      random_ = other.random_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GfBtSequencerMessage Clone() {
      return new GfBtSequencerMessage(this);
    }

    /// <summary>Field number for the "composite" field.</summary>
    public const int CompositeFieldNumber = 1;
    private global::GameMain.Runtime.GfBtCompositeMessage composite_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameMain.Runtime.GfBtCompositeMessage Composite {
      get { return composite_; }
      set {
        composite_ = value;
      }
    }

    /// <summary>Field number for the "random" field.</summary>
    public const int RandomFieldNumber = 2;
    private bool random_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Random {
      get { return random_; }
      set {
        random_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GfBtSequencerMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GfBtSequencerMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Composite, other.Composite)) return false;
      if (Random != other.Random) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (composite_ != null) hash ^= Composite.GetHashCode();
      if (Random != false) hash ^= Random.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (composite_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Composite);
      }
      if (Random != false) {
        output.WriteRawTag(16);
        output.WriteBool(Random);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (composite_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Composite);
      }
      if (Random != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GfBtSequencerMessage other) {
      if (other == null) {
        return;
      }
      if (other.composite_ != null) {
        if (composite_ == null) {
          Composite = new global::GameMain.Runtime.GfBtCompositeMessage();
        }
        Composite.MergeFrom(other.Composite);
      }
      if (other.Random != false) {
        Random = other.Random;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (composite_ == null) {
              Composite = new global::GameMain.Runtime.GfBtCompositeMessage();
            }
            input.ReadMessage(Composite);
            break;
          }
          case 16: {
            Random = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GfBtPropertyMessage : pb::IMessage<GfBtPropertyMessage> {
    private static readonly pb::MessageParser<GfBtPropertyMessage> _parser = new pb::MessageParser<GfBtPropertyMessage>(() => new GfBtPropertyMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GfBtPropertyMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMain.Runtime.BehaviourTreeProtocolReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GfBtPropertyMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GfBtPropertyMessage(GfBtPropertyMessage other) : this() {
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GfBtPropertyMessage Clone() {
      return new GfBtPropertyMessage(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private int type_;
    /// <summary>
    ///0=Get, 1=Set
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GfBtPropertyMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GfBtPropertyMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GfBtPropertyMessage other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///==========Action==========
  /// </summary>
  public sealed partial class BtWaitMessage : pb::IMessage<BtWaitMessage> {
    private static readonly pb::MessageParser<BtWaitMessage> _parser = new pb::MessageParser<BtWaitMessage>(() => new BtWaitMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BtWaitMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMain.Runtime.BehaviourTreeProtocolReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BtWaitMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BtWaitMessage(BtWaitMessage other) : this() {
      duration_ = other.duration_;
      randomVariance_ = other.randomVariance_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BtWaitMessage Clone() {
      return new BtWaitMessage(this);
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 1;
    private float duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "randomVariance" field.</summary>
    public const int RandomVarianceFieldNumber = 2;
    private float randomVariance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RandomVariance {
      get { return randomVariance_; }
      set {
        randomVariance_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BtWaitMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BtWaitMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Duration, other.Duration)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RandomVariance, other.RandomVariance)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Duration != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Duration);
      if (RandomVariance != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RandomVariance);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Duration != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Duration);
      }
      if (RandomVariance != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(RandomVariance);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Duration != 0F) {
        size += 1 + 4;
      }
      if (RandomVariance != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BtWaitMessage other) {
      if (other == null) {
        return;
      }
      if (other.Duration != 0F) {
        Duration = other.Duration;
      }
      if (other.RandomVariance != 0F) {
        RandomVariance = other.RandomVariance;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Duration = input.ReadFloat();
            break;
          }
          case 21: {
            RandomVariance = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BtDebugMessage : pb::IMessage<BtDebugMessage> {
    private static readonly pb::MessageParser<BtDebugMessage> _parser = new pb::MessageParser<BtDebugMessage>(() => new BtDebugMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BtDebugMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMain.Runtime.BehaviourTreeProtocolReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BtDebugMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BtDebugMessage(BtDebugMessage other) : this() {
      message_ = other.message_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BtDebugMessage Clone() {
      return new BtDebugMessage(this);
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 1;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BtDebugMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BtDebugMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Message != other.Message) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Message.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Message);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BtDebugMessage other) {
      if (other == null) {
        return;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BtCharacterIdleMessage : pb::IMessage<BtCharacterIdleMessage> {
    private static readonly pb::MessageParser<BtCharacterIdleMessage> _parser = new pb::MessageParser<BtCharacterIdleMessage>(() => new BtCharacterIdleMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BtCharacterIdleMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMain.Runtime.BehaviourTreeProtocolReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BtCharacterIdleMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BtCharacterIdleMessage(BtCharacterIdleMessage other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BtCharacterIdleMessage Clone() {
      return new BtCharacterIdleMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BtCharacterIdleMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BtCharacterIdleMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BtCharacterIdleMessage other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class BtCharacterMoveMessage : pb::IMessage<BtCharacterMoveMessage> {
    private static readonly pb::MessageParser<BtCharacterMoveMessage> _parser = new pb::MessageParser<BtCharacterMoveMessage>(() => new BtCharacterMoveMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BtCharacterMoveMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMain.Runtime.BehaviourTreeProtocolReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BtCharacterMoveMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BtCharacterMoveMessage(BtCharacterMoveMessage other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BtCharacterMoveMessage Clone() {
      return new BtCharacterMoveMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BtCharacterMoveMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BtCharacterMoveMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BtCharacterMoveMessage other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class BtCharacterPatrolMessage : pb::IMessage<BtCharacterPatrolMessage> {
    private static readonly pb::MessageParser<BtCharacterPatrolMessage> _parser = new pb::MessageParser<BtCharacterPatrolMessage>(() => new BtCharacterPatrolMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BtCharacterPatrolMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMain.Runtime.BehaviourTreeProtocolReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BtCharacterPatrolMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BtCharacterPatrolMessage(BtCharacterPatrolMessage other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BtCharacterPatrolMessage Clone() {
      return new BtCharacterPatrolMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BtCharacterPatrolMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BtCharacterPatrolMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BtCharacterPatrolMessage other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class BtCharacterPlayAnimationStateMessage : pb::IMessage<BtCharacterPlayAnimationStateMessage> {
    private static readonly pb::MessageParser<BtCharacterPlayAnimationStateMessage> _parser = new pb::MessageParser<BtCharacterPlayAnimationStateMessage>(() => new BtCharacterPlayAnimationStateMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BtCharacterPlayAnimationStateMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMain.Runtime.BehaviourTreeProtocolReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BtCharacterPlayAnimationStateMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BtCharacterPlayAnimationStateMessage(BtCharacterPlayAnimationStateMessage other) : this() {
      stateName_ = other.stateName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BtCharacterPlayAnimationStateMessage Clone() {
      return new BtCharacterPlayAnimationStateMessage(this);
    }

    /// <summary>Field number for the "stateName" field.</summary>
    public const int StateNameFieldNumber = 1;
    private string stateName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StateName {
      get { return stateName_; }
      set {
        stateName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BtCharacterPlayAnimationStateMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BtCharacterPlayAnimationStateMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StateName != other.StateName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StateName.Length != 0) hash ^= StateName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StateName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(StateName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StateName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StateName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BtCharacterPlayAnimationStateMessage other) {
      if (other == null) {
        return;
      }
      if (other.StateName.Length != 0) {
        StateName = other.StateName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            StateName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BtCharacterFollowMessage : pb::IMessage<BtCharacterFollowMessage> {
    private static readonly pb::MessageParser<BtCharacterFollowMessage> _parser = new pb::MessageParser<BtCharacterFollowMessage>(() => new BtCharacterFollowMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BtCharacterFollowMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMain.Runtime.BehaviourTreeProtocolReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BtCharacterFollowMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BtCharacterFollowMessage(BtCharacterFollowMessage other) : this() {
      minDistance_ = other.minDistance_;
      maxDistance_ = other.maxDistance_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BtCharacterFollowMessage Clone() {
      return new BtCharacterFollowMessage(this);
    }

    /// <summary>Field number for the "minDistance" field.</summary>
    public const int MinDistanceFieldNumber = 1;
    private int minDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinDistance {
      get { return minDistance_; }
      set {
        minDistance_ = value;
      }
    }

    /// <summary>Field number for the "maxDistance" field.</summary>
    public const int MaxDistanceFieldNumber = 2;
    private int maxDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxDistance {
      get { return maxDistance_; }
      set {
        maxDistance_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BtCharacterFollowMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BtCharacterFollowMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MinDistance != other.MinDistance) return false;
      if (MaxDistance != other.MaxDistance) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MinDistance != 0) hash ^= MinDistance.GetHashCode();
      if (MaxDistance != 0) hash ^= MaxDistance.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MinDistance != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MinDistance);
      }
      if (MaxDistance != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MaxDistance);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MinDistance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinDistance);
      }
      if (MaxDistance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxDistance);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BtCharacterFollowMessage other) {
      if (other == null) {
        return;
      }
      if (other.MinDistance != 0) {
        MinDistance = other.MinDistance;
      }
      if (other.MaxDistance != 0) {
        MaxDistance = other.MaxDistance;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MinDistance = input.ReadInt32();
            break;
          }
          case 16: {
            MaxDistance = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///==========ExposedProperty==========
  /// </summary>
  public sealed partial class BtPropertyIntMessage : pb::IMessage<BtPropertyIntMessage> {
    private static readonly pb::MessageParser<BtPropertyIntMessage> _parser = new pb::MessageParser<BtPropertyIntMessage>(() => new BtPropertyIntMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BtPropertyIntMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMain.Runtime.BehaviourTreeProtocolReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BtPropertyIntMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BtPropertyIntMessage(BtPropertyIntMessage other) : this() {
      key_ = other.key_;
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BtPropertyIntMessage Clone() {
      return new BtPropertyIntMessage(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BtPropertyIntMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BtPropertyIntMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Value != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Value != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BtPropertyIntMessage other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 16: {
            Value = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BtPropertyStringMessage : pb::IMessage<BtPropertyStringMessage> {
    private static readonly pb::MessageParser<BtPropertyStringMessage> _parser = new pb::MessageParser<BtPropertyStringMessage>(() => new BtPropertyStringMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BtPropertyStringMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMain.Runtime.BehaviourTreeProtocolReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BtPropertyStringMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BtPropertyStringMessage(BtPropertyStringMessage other) : this() {
      key_ = other.key_;
      content_ = other.content_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BtPropertyStringMessage Clone() {
      return new BtPropertyStringMessage(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 2;
    private string content_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BtPropertyStringMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BtPropertyStringMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Content != other.Content) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Content);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BtPropertyStringMessage other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Content = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///==========Decorator==========
  /// </summary>
  public sealed partial class BtBaseConditionMessage : pb::IMessage<BtBaseConditionMessage> {
    private static readonly pb::MessageParser<BtBaseConditionMessage> _parser = new pb::MessageParser<BtBaseConditionMessage>(() => new BtBaseConditionMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BtBaseConditionMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMain.Runtime.BehaviourTreeProtocolReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BtBaseConditionMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BtBaseConditionMessage(BtBaseConditionMessage other) : this() {
      child_ = other.child_;
      operator_ = other.operator_;
      stops_ = other.stops_;
      key_ = other.key_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BtBaseConditionMessage Clone() {
      return new BtBaseConditionMessage(this);
    }

    /// <summary>Field number for the "child" field.</summary>
    public const int ChildFieldNumber = 1;
    private int child_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Child {
      get { return child_; }
      set {
        child_ = value;
      }
    }

    /// <summary>Field number for the "operator" field.</summary>
    public const int OperatorFieldNumber = 2;
    private int operator_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Operator {
      get { return operator_; }
      set {
        operator_ = value;
      }
    }

    /// <summary>Field number for the "stops" field.</summary>
    public const int StopsFieldNumber = 3;
    private int stops_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Stops {
      get { return stops_; }
      set {
        stops_ = value;
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 4;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BtBaseConditionMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BtBaseConditionMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Child != other.Child) return false;
      if (Operator != other.Operator) return false;
      if (Stops != other.Stops) return false;
      if (Key != other.Key) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Child != 0) hash ^= Child.GetHashCode();
      if (Operator != 0) hash ^= Operator.GetHashCode();
      if (Stops != 0) hash ^= Stops.GetHashCode();
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Child != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Child);
      }
      if (Operator != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Operator);
      }
      if (Stops != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Stops);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Key);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Child != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Child);
      }
      if (Operator != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Operator);
      }
      if (Stops != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Stops);
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BtBaseConditionMessage other) {
      if (other == null) {
        return;
      }
      if (other.Child != 0) {
        Child = other.Child;
      }
      if (other.Operator != 0) {
        Operator = other.Operator;
      }
      if (other.Stops != 0) {
        Stops = other.Stops;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Child = input.ReadInt32();
            break;
          }
          case 16: {
            Operator = input.ReadInt32();
            break;
          }
          case 24: {
            Stops = input.ReadInt32();
            break;
          }
          case 34: {
            Key = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BtFloatConditionMessage : pb::IMessage<BtFloatConditionMessage> {
    private static readonly pb::MessageParser<BtFloatConditionMessage> _parser = new pb::MessageParser<BtFloatConditionMessage>(() => new BtFloatConditionMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BtFloatConditionMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMain.Runtime.BehaviourTreeProtocolReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BtFloatConditionMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BtFloatConditionMessage(BtFloatConditionMessage other) : this() {
      base_ = other.base_ != null ? other.base_.Clone() : null;
      floatValue_ = other.floatValue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BtFloatConditionMessage Clone() {
      return new BtFloatConditionMessage(this);
    }

    /// <summary>Field number for the "base" field.</summary>
    public const int BaseFieldNumber = 1;
    private global::GameMain.Runtime.BtBaseConditionMessage base_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameMain.Runtime.BtBaseConditionMessage Base {
      get { return base_; }
      set {
        base_ = value;
      }
    }

    /// <summary>Field number for the "floatValue" field.</summary>
    public const int FloatValueFieldNumber = 2;
    private float floatValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FloatValue {
      get { return floatValue_; }
      set {
        floatValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BtFloatConditionMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BtFloatConditionMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Base, other.Base)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FloatValue, other.FloatValue)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (base_ != null) hash ^= Base.GetHashCode();
      if (FloatValue != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FloatValue);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (base_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Base);
      }
      if (FloatValue != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(FloatValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (base_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Base);
      }
      if (FloatValue != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BtFloatConditionMessage other) {
      if (other == null) {
        return;
      }
      if (other.base_ != null) {
        if (base_ == null) {
          Base = new global::GameMain.Runtime.BtBaseConditionMessage();
        }
        Base.MergeFrom(other.Base);
      }
      if (other.FloatValue != 0F) {
        FloatValue = other.FloatValue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (base_ == null) {
              Base = new global::GameMain.Runtime.BtBaseConditionMessage();
            }
            input.ReadMessage(Base);
            break;
          }
          case 21: {
            FloatValue = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BtBoolConditionMessage : pb::IMessage<BtBoolConditionMessage> {
    private static readonly pb::MessageParser<BtBoolConditionMessage> _parser = new pb::MessageParser<BtBoolConditionMessage>(() => new BtBoolConditionMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BtBoolConditionMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMain.Runtime.BehaviourTreeProtocolReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BtBoolConditionMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BtBoolConditionMessage(BtBoolConditionMessage other) : this() {
      base_ = other.base_ != null ? other.base_.Clone() : null;
      boolValue_ = other.boolValue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BtBoolConditionMessage Clone() {
      return new BtBoolConditionMessage(this);
    }

    /// <summary>Field number for the "base" field.</summary>
    public const int BaseFieldNumber = 1;
    private global::GameMain.Runtime.BtBaseConditionMessage base_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::GameMain.Runtime.BtBaseConditionMessage Base {
      get { return base_; }
      set {
        base_ = value;
      }
    }

    /// <summary>Field number for the "boolValue" field.</summary>
    public const int BoolValueFieldNumber = 2;
    private bool boolValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BoolValue {
      get { return boolValue_; }
      set {
        boolValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BtBoolConditionMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BtBoolConditionMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Base, other.Base)) return false;
      if (BoolValue != other.BoolValue) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (base_ != null) hash ^= Base.GetHashCode();
      if (BoolValue != false) hash ^= BoolValue.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (base_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Base);
      }
      if (BoolValue != false) {
        output.WriteRawTag(16);
        output.WriteBool(BoolValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (base_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Base);
      }
      if (BoolValue != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BtBoolConditionMessage other) {
      if (other == null) {
        return;
      }
      if (other.base_ != null) {
        if (base_ == null) {
          Base = new global::GameMain.Runtime.BtBaseConditionMessage();
        }
        Base.MergeFrom(other.Base);
      }
      if (other.BoolValue != false) {
        BoolValue = other.BoolValue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (base_ == null) {
              Base = new global::GameMain.Runtime.BtBaseConditionMessage();
            }
            input.ReadMessage(Base);
            break;
          }
          case 16: {
            BoolValue = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BtCharacterServiceMessage : pb::IMessage<BtCharacterServiceMessage> {
    private static readonly pb::MessageParser<BtCharacterServiceMessage> _parser = new pb::MessageParser<BtCharacterServiceMessage>(() => new BtCharacterServiceMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BtCharacterServiceMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMain.Runtime.BehaviourTreeProtocolReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BtCharacterServiceMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BtCharacterServiceMessage(BtCharacterServiceMessage other) : this() {
      child_ = other.child_;
      interval_ = other.interval_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BtCharacterServiceMessage Clone() {
      return new BtCharacterServiceMessage(this);
    }

    /// <summary>Field number for the "child" field.</summary>
    public const int ChildFieldNumber = 1;
    private int child_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Child {
      get { return child_; }
      set {
        child_ = value;
      }
    }

    /// <summary>Field number for the "interval" field.</summary>
    public const int IntervalFieldNumber = 2;
    private float interval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Interval {
      get { return interval_; }
      set {
        interval_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BtCharacterServiceMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BtCharacterServiceMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Child != other.Child) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Interval, other.Interval)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Child != 0) hash ^= Child.GetHashCode();
      if (Interval != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Interval);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Child != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Child);
      }
      if (Interval != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Interval);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Child != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Child);
      }
      if (Interval != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BtCharacterServiceMessage other) {
      if (other == null) {
        return;
      }
      if (other.Child != 0) {
        Child = other.Child;
      }
      if (other.Interval != 0F) {
        Interval = other.Interval;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Child = input.ReadInt32();
            break;
          }
          case 21: {
            Interval = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BtCharacterSeekMessage : pb::IMessage<BtCharacterSeekMessage> {
    private static readonly pb::MessageParser<BtCharacterSeekMessage> _parser = new pb::MessageParser<BtCharacterSeekMessage>(() => new BtCharacterSeekMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BtCharacterSeekMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GameMain.Runtime.BehaviourTreeProtocolReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BtCharacterSeekMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BtCharacterSeekMessage(BtCharacterSeekMessage other) : this() {
      radius_ = other.radius_;
      angle_ = other.angle_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BtCharacterSeekMessage Clone() {
      return new BtCharacterSeekMessage(this);
    }

    /// <summary>Field number for the "radius" field.</summary>
    public const int RadiusFieldNumber = 1;
    private float radius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Radius {
      get { return radius_; }
      set {
        radius_ = value;
      }
    }

    /// <summary>Field number for the "angle" field.</summary>
    public const int AngleFieldNumber = 2;
    private int angle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Angle {
      get { return angle_; }
      set {
        angle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BtCharacterSeekMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BtCharacterSeekMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Radius, other.Radius)) return false;
      if (Angle != other.Angle) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Radius != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Radius);
      if (Angle != 0) hash ^= Angle.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Radius != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Radius);
      }
      if (Angle != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Angle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Radius != 0F) {
        size += 1 + 4;
      }
      if (Angle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Angle);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BtCharacterSeekMessage other) {
      if (other == null) {
        return;
      }
      if (other.Radius != 0F) {
        Radius = other.Radius;
      }
      if (other.Angle != 0) {
        Angle = other.Angle;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Radius = input.ReadFloat();
            break;
          }
          case 16: {
            Angle = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
